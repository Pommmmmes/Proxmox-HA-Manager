{"version":3,"file":"test-dropdown.element.js","sources":["../../../src/test-dropdown/test-dropdown.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { baseStyles, I18nService, event, property } from '@cds/core/internal';\nimport { html, LitElement } from 'lit';\nimport styles from './test-dropdown.element.scss';\n/**\n * Dropdown, example test component. Do not use in production.\n *\n * ```typescript\n * import '@cds/core/test-dropdown';\n * ```\n *\n * ```html\n * <cds-test-dropdown label=\"click me!\">\n *   Hello World\n * </cds-test-dropdown>\n * ```\n *\n * @slot - Content slot for dropdown content\n * @event {boolean} openChange - notify open state change of dropdown\n * @cssprop --border-color\n * @cssprop --background-color\n * @cssprop --text-color\n */\nexport class CdsTestDropdown extends LitElement {\n    constructor() {\n        super(...arguments);\n        this._open = false;\n        /** Set the dropdown button text */\n        this.label = 'dropdown';\n    }\n    get open() {\n        return this._open;\n    }\n    /** Set open to open or close the dropdown */\n    set open(value) {\n        if (value !== this._open) {\n            const old = this._open;\n            this._open = value;\n            this.requestUpdate('open', old);\n            this.openChange.emit(this.open);\n        }\n    }\n    static get styles() {\n        return [baseStyles, styles];\n    }\n    render() {\n        return html `\n      <div class=\"dropdown\">\n        <button @click=\"${() => this.toggle()}\" class=\"btn\">${this.label}</button>\n        ${this.open\n            ? html ` <div>\n              ${I18nService.keys.dropdown.open}\n              <slot></slot>\n            </div>`\n            : ''}\n      </div>\n    `;\n    }\n    /** Toggle the current open state of the dropdown */\n    toggle() {\n        this.open = !this.open;\n    }\n}\n__decorate([\n    event()\n], CdsTestDropdown.prototype, \"openChange\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsTestDropdown.prototype, \"open\", null);\n__decorate([\n    property({ type: String })\n], CdsTestDropdown.prototype, \"label\", void 0);\n"],"names":["CdsTestDropdown","LitElement","constructor","super","this","_open","label","open","value","old","requestUpdate","openChange","emit","styles","baseStyles","render","html","toggle","I18nService","keys","dropdown","__decorate","event","prototype","property","type","Boolean","String"],"mappings":"uNA4BO,MAAMA,UAAwBC,EACjCC,cACIC,oBACAC,KAAKC,OAAQ,EAEbD,KAAKE,MAAQ,WAEbC,WACA,OAAOH,KAAKC,MAGZE,SAAKC,GACL,GAAIA,IAAUJ,KAAKC,MAAO,CACtB,MAAMI,EAAML,KAAKC,MACjBD,KAAKC,MAAQG,EACbJ,KAAKM,cAAc,OAAQD,GAC3BL,KAAKO,WAAWC,KAAKR,KAAKG,OAGvBM,oBACP,MAAO,CAACC,EAAYD,GAExBE,SACI,OAAOC,CAAK,yCAEM,IAAMZ,KAAKa,yBAAyBb,KAAKE,kBACzDF,KAAKG,KACDS,CAAK,QACHE,EAAYC,KAAKC,SAASb,0BAG5B,WAKVU,SACIb,KAAKG,MAAQH,KAAKG,MAG1Bc,EAAW,CACPC,KACDtB,EAAgBuB,UAAW,kBAAc,GAC5CF,EAAW,CACPG,EAAS,CAAEC,KAAMC,WAClB1B,EAAgBuB,UAAW,OAAQ,MACtCF,EAAW,CACPG,EAAS,CAAEC,KAAME,UAClB3B,EAAgBuB,UAAW,aAAS"}