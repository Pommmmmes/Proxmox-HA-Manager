{"version":3,"file":"file.element.js","sources":["../../../src/file/file.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { state, i18n, I18nService, property } from '@cds/core/internal';\nimport { CdsControl } from '@cds/core/forms';\nimport styles from './file.element.scss';\n/**\n * Time Input\n *\n * ```typescript\n * import '@cds/core/file/register.js';\n * ```\n *\n * ```html\n * <cds-file>\n *   <label>file</label>\n *   <input type=\"file\" />\n * </cds-file>\n * ```\n *\n * @element cds-file\n * @slot - For projecting file input and label\n */\nexport class CdsFile extends CdsControl {\n    constructor() {\n        super(...arguments);\n        this.i18n = I18nService.keys.file;\n        /**\n         * Set the label of the browse button.\n         */\n        this.buttonLabel = this.i18n.browse;\n        this.fixedControlWidth = true;\n        this.supportsPrefixSuffixActions = false;\n    }\n    static get styles() {\n        return [...super.styles, styles];\n    }\n    get inputTemplate() {\n        return html `\n      <div cds-layout=\"horizontal gap:sm align:vertical-center\">\n        <cds-button size=\"sm\" action=\"outline\" @click=\"${() => this.label.click()}\" ?disabled=${this.disabled}>\n          <cds-icon shape=\"folder\" aria-hidden=\"true\"></cds-icon>\n          <span>${this.buttonLabelForSelection || this.buttonLabel}</span>\n        </cds-button>\n        ${this.clearFilesControlTemplate}\n      </div>\n    `;\n    }\n    get clearFilesControlTemplate() {\n        return this.inputControl.files?.length && !this.disabled\n            ? html `<cds-button-action\n          shape=\"times\"\n          @click=${() => this.clearFiles()}\n          aria-label=\"${this.i18n.removeFile}\"\n        ></cds-button-action>`\n            : html ``;\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        this.inputControl.addEventListener('change', e => {\n            // NOTE: have to distinguish here being user-caused events and programmatic\n            // events (e.isTrusted true/false) so that we don't fire a change event loop\n            if (e.isTrusted) {\n                this.updateLabelAndFocus(e.target.files);\n            }\n        });\n    }\n    /** @private */\n    clearFiles(fireEvent = true) {\n        this.buttonLabelForSelection = '';\n        this.inputControl.value = '';\n        // when input is reset like this it isn't registering an onchange event\n        // NOTE: tsc + karma is complaining about dispatchEvent being a method on inputControl\n        if (fireEvent && this.inputControl.dispatchEvent) {\n            this.inputControl.dispatchEvent(new Event('change', { bubbles: true, cancelable: true }));\n        }\n        const browseButton = this.shadowRoot?.querySelector('cds-button');\n        if (browseButton) {\n            browseButton.focus();\n        }\n    }\n    /** @private */\n    updateLabelAndFocus(files) {\n        if (files && files.length) {\n            this.buttonLabelForSelection = files.length > 1 ? `${files.length} ${this.i18n.files}` : files[0].name;\n        }\n        else {\n            this.clearFiles(false);\n        }\n    }\n}\n__decorate([\n    i18n()\n], CdsFile.prototype, \"i18n\", void 0);\n__decorate([\n    property()\n], CdsFile.prototype, \"buttonLabel\", void 0);\n__decorate([\n    state()\n], CdsFile.prototype, \"buttonLabelForSelection\", void 0);\n__decorate([\n    state()\n], CdsFile.prototype, \"fixedControlWidth\", void 0);\n__decorate([\n    state()\n], CdsFile.prototype, \"supportsPrefixSuffixActions\", void 0);\n"],"names":["CdsFile","CdsControl","constructor","super","this","i18n","I18nService","keys","file","buttonLabel","browse","fixedControlWidth","supportsPrefixSuffixActions","styles","inputTemplate","html","label","click","disabled","buttonLabelForSelection","clearFilesControlTemplate","inputControl","files","length","clearFiles","removeFile","firstUpdated","props","addEventListener","e","isTrusted","updateLabelAndFocus","target","fireEvent","value","dispatchEvent","Event","bubbles","cancelable","browseButton","shadowRoot","querySelector","focus","name","__decorate","prototype","property","state"],"mappings":"qOA2BO,MAAMA,UAAgBC,EACzBC,cACIC,oBACAC,KAAKC,KAAOC,EAAYC,KAAKC,KAI7BJ,KAAKK,YAAcL,KAAKC,KAAKK,OAC7BN,KAAKO,mBAAoB,EACzBP,KAAKQ,6BAA8B,EAE5BC,oBACP,MAAO,IAAIV,MAAMU,OAAQA,GAEzBC,oBACA,OAAOC,CAAK,4GAEqC,IAAMX,KAAKY,MAAMC,uBAAsBb,KAAKc,0EAEnFd,KAAKe,yBAA2Bf,KAAKK,kCAE7CL,KAAKgB,kCAIPA,gCACA,OAAOhB,KAAKiB,aAAaC,OAAOC,SAAWnB,KAAKc,SAC1CH,CAAK,4CAEA,IAAMX,KAAKoB,6BACNpB,KAAKC,KAAKoB,mCAEpBV,CAAK,GAEfW,aAAaC,GACTxB,MAAMuB,aAAaC,GACnBvB,KAAKiB,aAAaO,iBAAiB,UAAUC,IAGrCA,EAAEC,WACF1B,KAAK2B,oBAAoBF,EAAEG,OAAOV,UAK9CE,WAAWS,GAAY,GACnB7B,KAAKe,wBAA0B,GAC/Bf,KAAKiB,aAAaa,MAAQ,GAGtBD,GAAa7B,KAAKiB,aAAac,eAC/B/B,KAAKiB,aAAac,cAAc,IAAIC,MAAM,SAAU,CAAEC,SAAS,EAAMC,YAAY,KAErF,MAAMC,EAAenC,KAAKoC,YAAYC,cAAc,cAChDF,GACAA,EAAaG,QAIrBX,oBAAoBT,GACZA,GAASA,EAAMC,OACfnB,KAAKe,wBAA0BG,EAAMC,OAAS,EAAI,GAAGD,EAAMC,UAAUnB,KAAKC,KAAKiB,QAAUA,EAAM,GAAGqB,KAGlGvC,KAAKoB,YAAW,IAI5BoB,EAAW,CACPvC,KACDL,EAAQ6C,UAAW,YAAQ,GAC9BD,EAAW,CACPE,KACD9C,EAAQ6C,UAAW,mBAAe,GACrCD,EAAW,CACPG,KACD/C,EAAQ6C,UAAW,+BAA2B,GACjDD,EAAW,CACPG,KACD/C,EAAQ6C,UAAW,yBAAqB,GAC3CD,EAAW,CACPG,KACD/C,EAAQ6C,UAAW,mCAA+B"}