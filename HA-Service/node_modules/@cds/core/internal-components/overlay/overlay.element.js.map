{"version":3,"file":"overlay.element.js","sources":["../../../../src/internal-components/overlay/overlay.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { AnimationModalEnterName, animate, baseStyles, event, i18n, I18nService, state, property, reverseAnimation, focusTrap, ariaModal, firstFocus, layer, closable, triggerable, } from '@cds/core/internal';\nimport { html, LitElement } from 'lit';\nimport styles from './overlay.element.scss';\nimport sharedStyles from './shared.element.scss';\nlet CdsInternalStaticOverlay = class CdsInternalStaticOverlay extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.closable = false;\n        // eslint-disable-next-line rulesdir/reserved-property-names\n        this.hidden = false;\n        this.demoMode = false;\n        this.i18n = I18nService.keys.overlay;\n    }\n    // renderRoot needs delegatesFocus so that focus can cross the shadowDOM inside an element with aria-modal set to true\n    static get shadowRootOptions() {\n        return { ...super.shadowRootOptions, delegatesFocus: true };\n    }\n    get closeButtonTemplate() {\n        return html `<cds-internal-close-button\n      cds-layout=\"align:top\"\n      aria-label=${this.i18n.closeButtonAriaLabel}\n      @click=${() => this.closeOverlay('close-button-click')}\n    ></cds-internal-close-button>`;\n    }\n    get backdropTemplate() {\n        return html `<div class=\"overlay-backdrop\" aria-hidden=\"true\" @click=${() => this.backdropClick()}></div>`;\n    }\n    render() {\n        return html `\n      ${this.backdropTemplate}\n      <div class=\"private-host\" tabindex=\"-1\">\n        <slot></slot>\n      </div>\n    `;\n    }\n    backdropClick() {\n        if (this.layerController.isActiveLayer) {\n            this.closeOverlay('backdrop-click');\n        }\n    }\n    closeOverlay(trigger = 'custom') {\n        this.closableController.close(trigger);\n    }\n    static get styles() {\n        return [baseStyles, styles, sharedStyles];\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], CdsInternalStaticOverlay.prototype, \"closable\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsInternalStaticOverlay.prototype, \"hidden\", void 0);\n__decorate([\n    state({ type: Boolean, reflect: true })\n], CdsInternalStaticOverlay.prototype, \"demoMode\", void 0);\n__decorate([\n    i18n()\n], CdsInternalStaticOverlay.prototype, \"i18n\", void 0);\nCdsInternalStaticOverlay = __decorate([\n    layer(),\n    closable(),\n    focusTrap(),\n    ariaModal(),\n    firstFocus(),\n    triggerable()\n], CdsInternalStaticOverlay);\nexport { CdsInternalStaticOverlay };\n/**\n *\n * ```typescript\n * import '@cds/core/internal-components/overlay/register.js';\n * ```\n *\n * ```html\n * <cds-internal-overlay>\n *  <section cds-layout=\"vertical align:horizontal-stretch\">\n *    <div cds-layout=\"vertical pad:md gap:md\">\n *      <h2 cds-text=\"display\">A Title</h2>\n *      <div>\n *        <p cds-text=\"body\">\n *          Content inside a generic overlay.\n *        </p>\n *      </div>\n *    </div>\n *  </section>\n * </cds-internal-overlay>\n * ```\n *\n * @element cds-internal-overlay\n * @slot - Content slot for the content inside the overlay's panel\n * @event closeChange - Notify user when close event has occurred\n * @cssprop --backdrop-background\n * @cssprop --layered-backdrop-background\n * @cssprop --animation-duration\n * @cssprop --animation-easing\n *\n * KNOWN ISSUE: Safari jumps through the exit animation but only when the ESC key is pressed.\n *\n */\nlet CdsInternalOverlay = class CdsInternalOverlay extends CdsInternalStaticOverlay {\n    constructor() {\n        super(...arguments);\n        this.cdsMotion = 'on';\n    }\n};\n__decorate([\n    property({ type: String })\n], CdsInternalOverlay.prototype, \"cdsMotion\", void 0);\n__decorate([\n    event()\n], CdsInternalOverlay.prototype, \"cdsMotionChange\", void 0);\nCdsInternalOverlay = __decorate([\n    animate({\n        hidden: {\n            true: reverseAnimation(AnimationModalEnterName),\n            false: AnimationModalEnterName,\n        },\n    })\n], CdsInternalOverlay);\nexport { CdsInternalOverlay };\n"],"names":["CdsInternalStaticOverlay","LitElement","constructor","super","this","closable","hidden","demoMode","i18n","I18nService","keys","overlay","shadowRootOptions","delegatesFocus","closeButtonTemplate","html","closeButtonAriaLabel","closeOverlay","backdropTemplate","backdropClick","render","layerController","isActiveLayer","trigger","closableController","close","styles","baseStyles","sharedStyles","__decorate","property","type","Boolean","prototype","state","reflect","layer","focusTrap","ariaModal","firstFocus","triggerable","CdsInternalOverlay","cdsMotion","String","event","animate","true","reverseAnimation","AnimationModalEnterName","false"],"mappings":"saAUG,IAACA,EAA2B,cAAuCC,EAClEC,cACIC,oBACAC,KAAKC,UAAW,EAEhBD,KAAKE,QAAS,EACdF,KAAKG,UAAW,EAChBH,KAAKI,KAAOC,EAAYC,KAAKC,QAGtBC,+BACP,MAAO,IAAKT,MAAMS,kBAAmBC,gBAAgB,GAErDC,0BACA,OAAOC,CAAK,iEAEDX,KAAKI,KAAKQ,iCACd,IAAMZ,KAAKa,aAAa,sDAG/BC,uBACA,OAAOH,CAAK,4DAA2D,IAAMX,KAAKe,0BAEtFC,SACI,OAAOL,CAAK,GACZX,KAAKc,8EAMTC,gBACQf,KAAKiB,gBAAgBC,eACrBlB,KAAKa,aAAa,kBAG1BA,aAAaM,EAAU,UACnBnB,KAAKoB,mBAAmBC,MAAMF,GAEvBG,oBACP,MAAO,CAACC,EAAYD,EAAQE,KAGpCC,EAAW,CACPC,EAAS,CAAEC,KAAMC,WAClBhC,EAAyBiC,UAAW,gBAAY,GACnDJ,EAAW,CACPC,EAAS,CAAEC,KAAMC,WAClBhC,EAAyBiC,UAAW,cAAU,GACjDJ,EAAW,CACPK,EAAM,CAAEH,KAAMC,QAASG,SAAS,KACjCnC,EAAyBiC,UAAW,gBAAY,GACnDJ,EAAW,CACPrB,KACDR,EAAyBiC,UAAW,YAAQ,GAC/CjC,EAA2B6B,EAAW,CAClCO,IACA/B,IACAgC,IACAC,IACAC,IACAC,KACDxC,GAkCA,IAACyC,EAAqB,cAAiCzC,EACtDE,cACIC,oBACAC,KAAKsC,UAAY,OAGzBb,EAAW,CACPC,EAAS,CAAEC,KAAMY,UAClBF,EAAmBR,UAAW,iBAAa,GAC9CJ,EAAW,CACPe,KACDH,EAAmBR,UAAW,uBAAmB,GACpDQ,EAAqBZ,EAAW,CAC5BgB,EAAQ,CACJvC,OAAQ,CACJwC,KAAMC,EAAiBC,GACvBC,MAAOD,MAGhBP"}