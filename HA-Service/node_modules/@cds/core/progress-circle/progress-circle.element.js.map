{"version":3,"file":"progress-circle.element.js","sources":["../../../src/progress-circle/progress-circle.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { baseStyles, hasStringPropertyChanged, property, updateEquilateralSizeStyles, I18nService, i18n, isNilOrEmpty, } from '@cds/core/internal';\nimport { getProgressCircleRadius } from './progress-circle.utils.js';\nimport styles from './progress-circle.element.scss';\n/**\n * Circular progress indicators provide a method to track how close long-running tasks are to\n * completion. Circular progress offer a compact way to track progress in a variety of situations.\n *\n * ```typescript\n * import '@cds/core/progress-circle/register.js';\n * ```\n *\n * ```html\n * <cds-progress-circle status=\"info\" value=\"25\"></cds-progress-circle>\n * ```\n *\n * @element cds-progress-circle\n * @cssprop --ring-color\n * @cssprop --ring-opacity\n * @cssprop --fill-color\n * @cssprop --fill-speed\n */\nexport class CdsProgressCircle extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Sets the color of the badge\n         * @type {neutral | info | success | warning | danger}\n         */\n        this.status = 'neutral';\n        /**\n         * Inverts color of circular progress bar if `true`.\n         * Useful for displaying icons on a dark background.\n         */\n        this.inverse = false;\n        /**\n         * Represents the thickness of the stroke of the circular progress.\n         *\n         * If undefined, it defaults to 3.\n         */\n        this.line = 3;\n        this.i18n = I18nService.keys.progress;\n    }\n    get radius() {\n        // 36 is the default viewbox dimensions\n        return getProgressCircleRadius(this.line);\n    }\n    get circumference() {\n        return 2 * Math.PI * this.radius;\n    }\n    /** @private */\n    get progress() {\n        const defaultProgress = 30;\n        return this.value ?? defaultProgress;\n    }\n    // Manages the progress fill.\n    get progressOffset() {\n        const progressMax = 100;\n        return ((progressMax - this.progress) / progressMax) * this.circumference;\n    }\n    get size() {\n        return this._size;\n    }\n    /**\n     * Apply numerical width-height or a t-shirt-sized CSS classname\n     * @type {string | sm | md | lg | xl | xxl}\n     */\n    set size(val) {\n        if (hasStringPropertyChanged(val, this._size)) {\n            const oldVal = this._size;\n            this._size = val;\n            updateEquilateralSizeStyles(this, val);\n            this.requestUpdate('size', oldVal);\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this._ariaLabel = this.ariaLabel;\n        this.updateAria();\n    }\n    updated(props) {\n        super.updated(props);\n        if (props.has('value') || props.has('i18n')) {\n            this.updateAria();\n        }\n    }\n    updateAria() {\n        if (this._ariaLabel === this.ariaLabel) {\n            this._ariaLabel = isNilOrEmpty(this.value) ? this.i18n.looping : `${this.i18n.loading} ${this.value}%`;\n            this.ariaLabel = this._ariaLabel;\n        }\n        if (isNilOrEmpty(this.value)) {\n            // no value so return aria attrs of the looping progress circle\n            this.role = 'img';\n            this.ariaValueMin = null;\n            this.ariaValueMax = null;\n            this.ariaValueNow = null;\n        }\n        else {\n            // if the progress has a value, then we return as if we expect it to be incrementing\n            this.role = 'progressbar';\n            this.ariaValueMin = 0;\n            this.ariaValueMax = 100;\n            this.ariaValueNow = this.value;\n        }\n    }\n    render() {\n        return html `\n      <div class=\"private-host\" aria-hidden=\"true\">\n        <div class=\"progress-wrapper\">\n          <svg\n            version=\"1.1\"\n            viewBox=\"0 0 36 36\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            focusable=\"false\"\n          >\n            <circle\n              stroke-width=\"${this.line}\"\n              fill=\"none\"\n              cx=\"18\"\n              cy=\"18\"\n              r=\"${this.radius}\"\n              class=\"${this.progress > 99 ? 'arcstroke' : 'backstroke'}\"\n            />\n            <path\n              d=\"M 18 18 m 0,-${this.radius} a ${this.radius},${this.radius} 0 1 1 0,${2 * this.radius} a ${this\n            .radius},${this.radius} 0 1 1 0,-${2 * this.radius}\"\n              class=\"fillstroke arcstroke\"\n              stroke-width=\"${this.line}\"\n              stroke-dasharray=\"${this.circumference}\"\n              stroke-dashoffset=\"${this.progressOffset}\"\n              fill=\"none\"\n            />\n          </svg>\n        </div>\n      </div>\n    `;\n    }\n    static get styles() {\n        return [baseStyles, styles];\n    }\n}\n__decorate([\n    property({ type: String })\n], CdsProgressCircle.prototype, \"status\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsProgressCircle.prototype, \"inverse\", void 0);\n__decorate([\n    property({ type: Number })\n], CdsProgressCircle.prototype, \"value\", void 0);\n__decorate([\n    property({ type: Number })\n], CdsProgressCircle.prototype, \"line\", void 0);\n__decorate([\n    property({ type: String })\n], CdsProgressCircle.prototype, \"size\", null);\n__decorate([\n    i18n()\n], CdsProgressCircle.prototype, \"i18n\", void 0);\n"],"names":["CdsProgressCircle","LitElement","constructor","super","this","status","inverse","line","i18n","I18nService","keys","progress","radius","getProgressCircleRadius","circumference","Math","PI","value","progressOffset","size","_size","val","hasStringPropertyChanged","oldVal","updateEquilateralSizeStyles","requestUpdate","connectedCallback","_ariaLabel","ariaLabel","updateAria","updated","props","has","isNilOrEmpty","looping","loading","role","ariaValueMin","ariaValueMax","ariaValueNow","render","html","styles","baseStyles","__decorate","property","type","String","prototype","Boolean","Number"],"mappings":"8WA4BO,MAAMA,UAA0BC,EACnCC,cACIC,oBAKAC,KAAKC,OAAS,UAKdD,KAAKE,SAAU,EAMfF,KAAKG,KAAO,EACZH,KAAKI,KAAOC,EAAYC,KAAKC,SAE7BC,aAEA,OAAOC,EAAwBT,KAAKG,MAEpCO,oBACA,OAAO,EAAIC,KAAKC,GAAKZ,KAAKQ,OAG1BD,eAEA,OAAOP,KAAKa,OADY,GAIxBC,qBAEA,OADoB,IACGd,KAAKO,UADR,IACmCP,KAAKU,cAE5DK,WACA,OAAOf,KAAKgB,MAMZD,SAAKE,GACL,GAAIC,EAAyBD,EAAKjB,KAAKgB,OAAQ,CAC3C,MAAMG,EAASnB,KAAKgB,MACpBhB,KAAKgB,MAAQC,EACbG,EAA4BpB,KAAMiB,GAClCjB,KAAKqB,cAAc,OAAQF,IAGnCG,oBACIvB,MAAMuB,oBACNtB,KAAKuB,WAAavB,KAAKwB,UACvBxB,KAAKyB,aAETC,QAAQC,GACJ5B,MAAM2B,QAAQC,IACVA,EAAMC,IAAI,UAAYD,EAAMC,IAAI,UAChC5B,KAAKyB,aAGbA,aACQzB,KAAKuB,aAAevB,KAAKwB,YACzBxB,KAAKuB,WAAaM,EAAa7B,KAAKa,OAASb,KAAKI,KAAK0B,QAAU,GAAG9B,KAAKI,KAAK2B,WAAW/B,KAAKa,SAC9Fb,KAAKwB,UAAYxB,KAAKuB,YAEtBM,EAAa7B,KAAKa,QAElBb,KAAKgC,KAAO,MACZhC,KAAKiC,aAAe,KACpBjC,KAAKkC,aAAe,KACpBlC,KAAKmC,aAAe,OAIpBnC,KAAKgC,KAAO,cACZhC,KAAKiC,aAAe,EACpBjC,KAAKkC,aAAe,IACpBlC,KAAKmC,aAAenC,KAAKa,OAGjCuB,SACI,OAAOC,CAAK,+QAYUrC,KAAKG,wCAIhBH,KAAKQ,kBACDR,KAAKO,SAAW,GAAK,YAAc,wCAG1BP,KAAKQ,YAAYR,KAAKQ,UAAUR,KAAKQ,kBAAkB,EAAIR,KAAKQ,YAAYR,KAC/FQ,UAAUR,KAAKQ,mBAAmB,EAAIR,KAAKQ,sDAE1BR,KAAKG,2BACDH,KAAKU,qCACJV,KAAKc,kDAQzBwB,oBACP,MAAO,CAACC,EAAYD,IAG5BE,EAAW,CACPC,EAAS,CAAEC,KAAMC,UAClB/C,EAAkBgD,UAAW,cAAU,GAC1CJ,EAAW,CACPC,EAAS,CAAEC,KAAMG,WAClBjD,EAAkBgD,UAAW,eAAW,GAC3CJ,EAAW,CACPC,EAAS,CAAEC,KAAMI,UAClBlD,EAAkBgD,UAAW,aAAS,GACzCJ,EAAW,CACPC,EAAS,CAAEC,KAAMI,UAClBlD,EAAkBgD,UAAW,YAAQ,GACxCJ,EAAW,CACPC,EAAS,CAAEC,KAAMC,UAClB/C,EAAkBgD,UAAW,OAAQ,MACxCJ,EAAW,CACPpC,KACDR,EAAkBgD,UAAW,YAAQ"}