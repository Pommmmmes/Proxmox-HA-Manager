{"version":3,"file":"select.element.js","sources":["../../../src/select/select.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { globalStyle, state, listenForAttributeChange } from '@cds/core/internal';\nimport { CdsControl } from '@cds/core/forms';\nimport { inputStyles } from '@cds/core/input';\nimport globalStyles from './select.global.scss';\nimport styles from './select.element.scss';\n/**\n * Select\n *\n * ```typescript\n * import '@cds/core/select';\n * ```\n *\n * ```html\n * <cds-select>\n *   <label>Test</label>\n *   <select>\n *    <option>Option One</option>\n *    <option>Option Two</option>\n *    <option>Option Three</option>\n *   </select>\n * </cds-select>\n * ```\n *\n * @element cds-select\n * @slot - For projecting select and label\n * @cssprop --background\n * @cssprop --background-size\n * @cssprop --border\n * @cssprop --border-bottom\n * @cssprop --outline\n * @cssprop --padding\n * @cssprop --font-size\n * @cssprop --color\n * @cssprop --line-height\n * @cssprop --transition\n */\nexport class CdsSelect extends CdsControl {\n    constructor() {\n        super(...arguments);\n        this.globalStyles = globalStyles;\n        this.multiple = false;\n        this.size = false;\n    }\n    get suffixDefaultTemplate() {\n        return html `<cds-button-expand expanded readonly></cds-button-expand>`;\n    }\n    static get styles() {\n        return [...super.styles, inputStyles, styles];\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        this.multiple = this.inputControl.hasAttribute('multiple');\n        this.observers.push(listenForAttributeChange(this.inputControl, 'multiple', val => (this.multiple = val !== null)));\n        this.size = this.inputControl.hasAttribute('size');\n        this.observers.push(listenForAttributeChange(this.inputControl, 'size', val => (this.size = val !== null)));\n    }\n}\n__decorate([\n    globalStyle()\n], CdsSelect.prototype, \"globalStyles\", void 0);\n__decorate([\n    state({ type: Boolean, reflect: true })\n], CdsSelect.prototype, \"multiple\", void 0);\n__decorate([\n    state({ type: Boolean, reflect: true })\n], CdsSelect.prototype, \"size\", void 0);\n"],"names":["CdsSelect","CdsControl","constructor","super","this","globalStyles","multiple","size","suffixDefaultTemplate","html","styles","inputStyles","firstUpdated","props","inputControl","hasAttribute","observers","push","listenForAttributeChange","val","__decorate","globalStyle","prototype","state","type","Boolean","reflect"],"mappings":"kUA2CO,MAAMA,UAAkBC,EAC3BC,cACIC,oBACAC,KAAKC,aAAeA,EACpBD,KAAKE,UAAW,EAChBF,KAAKG,MAAO,EAEZC,4BACA,OAAOC,CAAK,uEAELC,oBACP,MAAO,IAAIP,MAAMO,OAAQC,EAAaD,GAE1CE,aAAaC,GACTV,MAAMS,aAAaC,GACnBT,KAAKE,SAAWF,KAAKU,aAAaC,aAAa,YAC/CX,KAAKY,UAAUC,KAAKC,EAAyBd,KAAKU,aAAc,YAAYK,GAAQf,KAAKE,SAAmB,OAARa,KACpGf,KAAKG,KAAOH,KAAKU,aAAaC,aAAa,QAC3CX,KAAKY,UAAUC,KAAKC,EAAyBd,KAAKU,aAAc,QAAQK,GAAQf,KAAKG,KAAe,OAARY,MAGpGC,EAAW,CACPC,KACDrB,EAAUsB,UAAW,oBAAgB,GACxCF,EAAW,CACPG,EAAM,CAAEC,KAAMC,QAASC,SAAS,KACjC1B,EAAUsB,UAAW,gBAAY,GACpCF,EAAW,CACPG,EAAM,CAAEC,KAAMC,QAASC,SAAS,KACjC1B,EAAUsB,UAAW,YAAQ"}