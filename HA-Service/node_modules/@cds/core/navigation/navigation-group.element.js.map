{"version":3,"file":"navigation-group.element.js","sources":["../../../src/navigation/navigation-group.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { animate, AnimationNavigationGroupOpenName, baseStyles, event, i18n, I18nService, id, property, querySlot, querySlotAll, reverseAnimation, state, syncProps, syncPropsForAllItems, } from '@cds/core/internal';\nimport styles from './navigation-group.element.scss';\nexport const CdsNavigationGroupTagName = 'cds-navigation-group';\n/**\n *\n * ```typescript\n * import '@cds/core/navigation/register.js';\n * ```\n *\n * ```html\n * <cds-navigation-group>\n *   <cds-navigation-start></cds-navigation-start>\n *    <cds-navigation-item><a href=\"/home\">Home</cds-navigation-item>\n *    <cds-navigation-item><a href=\"/account\">Account</cds-navigation-item>\n * </cds-navigation-group>\n * ```\n *\n * @beta\n * @element cds-navigation-group\n * @event expandedChange - notify when the user has clicked the navigation expand/collapse button\n * @cssprop --animation-duration\n * @cssprop --animation-easing\n * @cssprop --background\n * @slot\n */\nlet CdsNavigationGroup = class CdsNavigationGroup extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.cdsMotion = 'on';\n        this.i18n = I18nService.keys.navigation;\n        this.expanded = false;\n        /**\n         * @desc\n         * The value of this property is passed down to start and item children. It is used to query for visible items when\n         * managing focus with key events in the root cds-navigation element.\n         *\n         * Note: eslint-disable  @typescript-eslint/no-unused-vars isn't ignoring the line\n         // eslint error happens because the value is set but never read.\n      \n         * @private\n         */\n        this.expandedGroup = false;\n        /**\n         * @desc\n         *\n         * Used to coordinate css things and the keyboard navigation focus changes.\n         */\n        this.hasFocus = false;\n    }\n    /**\n     * @description\n     * Getter method for a reference to the selector cds-navigation-group > cds-navigation-start\n     * This lets each group flag its cds-navigation-start element and sync that info down. This is\n     * needed because cds-navigation-start elements can be used at the root level and inside\n     * cds-navigation-group elements.\n     *\n     * @private\n     */\n    get isGroupStart() {\n        return !!this.groupStart;\n    }\n    render() {\n        return html `\n      <div class=\"private-host\" cds-layout=\"vertical wrap:none align:horizontal-stretch\">\n        <slot name=\"group-start\"></slot>\n        <div\n          class=\"group-items-wrapper\"\n          aria-hidden=\"${!this.expandedGroup}\"\n          aria-labelledby=\"${this.navigationGroupId}\"\n        >\n          <div class=\"group-items-container\" aria-expanded=\"${this.expanded}\">\n            <div class=\"navigation-group-items\" cds-layout=\"vertical wrap:none align:horizontal-stretch\" role=\"list\">\n              <slot></slot>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    }\n    static get styles() {\n        return [baseStyles, styles];\n    }\n    toggle() {\n        this.expandedChange.emit(!this.expanded);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.groupStart.removeEventListener('click', this.toggle.bind(this));\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        if (this.groupStart) {\n            this.groupStart.addEventListener('click', this.toggle.bind(this));\n        }\n    }\n    updated(props) {\n        super.updated(props);\n        if (props.has('expanded')) {\n            this.expandedGroup = this.expanded;\n        }\n        if (this.groupStart) {\n            syncProps(this.groupStart, this, {\n                active: true,\n                expanded: true,\n                isGroupStart: this.isGroupStart,\n                navigationGroupId: true,\n            });\n        }\n        syncPropsForAllItems(Array.from(this.groupItems), this, {\n            expandedGroup: true,\n        });\n    }\n};\n__decorate([\n    property({ type: String })\n], CdsNavigationGroup.prototype, \"cdsMotion\", void 0);\n__decorate([\n    event()\n], CdsNavigationGroup.prototype, \"expandedChange\", void 0);\n__decorate([\n    event()\n], CdsNavigationGroup.prototype, \"cdsMotionChange\", void 0);\n__decorate([\n    id()\n], CdsNavigationGroup.prototype, \"navigationGroupId\", void 0);\n__decorate([\n    i18n()\n], CdsNavigationGroup.prototype, \"i18n\", void 0);\n__decorate([\n    state()\n], CdsNavigationGroup.prototype, \"isGroupStart\", null);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CdsNavigationGroup.prototype, \"expanded\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsNavigationGroup.prototype, \"active\", void 0);\n__decorate([\n    state()\n], CdsNavigationGroup.prototype, \"expandedGroup\", void 0);\n__decorate([\n    querySlot(':scope > cds-navigation-start', { assign: 'group-start' })\n], CdsNavigationGroup.prototype, \"groupStart\", void 0);\n__decorate([\n    querySlotAll(':scope > cds-navigation-item')\n], CdsNavigationGroup.prototype, \"groupItems\", void 0);\n__decorate([\n    querySlotAll(':scope > cds-navigation-group')\n], CdsNavigationGroup.prototype, \"nestedGroups\", void 0);\nCdsNavigationGroup = __decorate([\n    animate({\n        expanded: {\n            true: AnimationNavigationGroupOpenName,\n            false: reverseAnimation(AnimationNavigationGroupOpenName),\n        },\n    })\n], CdsNavigationGroup);\nexport { CdsNavigationGroup };\n"],"names":["CdsNavigationGroupTagName","CdsNavigationGroup","LitElement","constructor","super","this","cdsMotion","i18n","I18nService","keys","navigation","expanded","expandedGroup","hasFocus","isGroupStart","groupStart","render","html","navigationGroupId","styles","baseStyles","toggle","expandedChange","emit","disconnectedCallback","removeEventListener","bind","firstUpdated","props","addEventListener","updated","has","syncProps","active","syncPropsForAllItems","Array","from","groupItems","__decorate","property","type","String","prototype","event","id","state","Boolean","reflect","querySlot","assign","querySlotAll","animate","true","AnimationNavigationGroupOpenName","false","reverseAnimation"],"mappings":"0YASY,MAACA,EAA4B,uBAuBtC,IAACC,EAAqB,cAAiCC,EACtDC,cACIC,oBACAC,KAAKC,UAAY,KACjBD,KAAKE,KAAOC,EAAYC,KAAKC,WAC7BL,KAAKM,UAAW,EAWhBN,KAAKO,eAAgB,EAMrBP,KAAKQ,UAAW,EAWhBC,mBACA,QAAST,KAAKU,WAElBC,SACI,OAAOC,CAAK,qKAKMZ,KAAKO,mCACFP,KAAKa,wEAE4Bb,KAAKM,2JASpDQ,oBACP,MAAO,CAACC,EAAYD,GAExBE,SACIhB,KAAKiB,eAAeC,MAAMlB,KAAKM,UAEnCa,uBACIpB,MAAMoB,uBACNnB,KAAKU,WAAWU,oBAAoB,QAASpB,KAAKgB,OAAOK,KAAKrB,OAElEsB,aAAaC,GACTxB,MAAMuB,aAAaC,GACfvB,KAAKU,YACLV,KAAKU,WAAWc,iBAAiB,QAASxB,KAAKgB,OAAOK,KAAKrB,OAGnEyB,QAAQF,GACJxB,MAAM0B,QAAQF,GACVA,EAAMG,IAAI,cACV1B,KAAKO,cAAgBP,KAAKM,UAE1BN,KAAKU,YACLiB,EAAU3B,KAAKU,WAAYV,KAAM,CAC7B4B,QAAQ,EACRtB,UAAU,EACVG,aAAcT,KAAKS,aACnBI,mBAAmB,IAG3BgB,EAAqBC,MAAMC,KAAK/B,KAAKgC,YAAahC,KAAM,CACpDO,eAAe,MAI3B0B,EAAW,CACPC,EAAS,CAAEC,KAAMC,UAClBxC,EAAmByC,UAAW,iBAAa,GAC9CJ,EAAW,CACPK,KACD1C,EAAmByC,UAAW,sBAAkB,GACnDJ,EAAW,CACPK,KACD1C,EAAmByC,UAAW,uBAAmB,GACpDJ,EAAW,CACPM,KACD3C,EAAmByC,UAAW,yBAAqB,GACtDJ,EAAW,CACP/B,KACDN,EAAmByC,UAAW,YAAQ,GACzCJ,EAAW,CACPO,KACD5C,EAAmByC,UAAW,eAAgB,MACjDJ,EAAW,CACPC,EAAS,CAAEC,KAAMM,QAASC,SAAS,KACpC9C,EAAmByC,UAAW,gBAAY,GAC7CJ,EAAW,CACPC,EAAS,CAAEC,KAAMM,WAClB7C,EAAmByC,UAAW,cAAU,GAC3CJ,EAAW,CACPO,KACD5C,EAAmByC,UAAW,qBAAiB,GAClDJ,EAAW,CACPU,EAAU,gCAAiC,CAAEC,OAAQ,iBACtDhD,EAAmByC,UAAW,kBAAc,GAC/CJ,EAAW,CACPY,EAAa,iCACdjD,EAAmByC,UAAW,kBAAc,GAC/CJ,EAAW,CACPY,EAAa,kCACdjD,EAAmByC,UAAW,oBAAgB,GACjDzC,EAAqBqC,EAAW,CAC5Ba,EAAQ,CACJxC,SAAU,CACNyC,KAAMC,EACNC,MAAOC,EAAiBF,OAGjCpD"}