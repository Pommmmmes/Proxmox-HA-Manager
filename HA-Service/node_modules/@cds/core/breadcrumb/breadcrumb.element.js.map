{"version":3,"file":"breadcrumb.element.js","sources":["../../../src/breadcrumb/breadcrumb.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { baseStyles, createId, state, querySlot } from '@cds/core/internal';\nimport styles from './breadcrumb.element.scss';\n/**\n * ```typescript\n * import '@cds/core/breadcrumb/register.js';\n * ```\n *\n * ```html\n * <cds-breadcrumb aria-label=\"breadcrumb\">\n *   <a href=\"/home\" cds-text=\"link\">Home</a>\n *   <a href=\"/parent\" cds-text=\"link\">Parent page</a>\n *   <span aria-current=\"page\">Current page</span>\n * </cds-breadcrumb>\n * ```\n *\n * @element cds-breadcrumb\n * @cssprop --font-size\n * @cssprop --font-weight\n * @cssprop --letter-spacing\n * @cssprop --color\n */\nexport class CdsBreadcrumb extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.navItems = [];\n    }\n    render() {\n        return html `\n      <div class=\"private-host\">\n        <ol cds-layout=\"horizontal gap:xs align:vertical-center\">\n          ${this.slotNames.map(slotName => html `\n              <li cds-layout=\"horizontal gap:xs align:vertical-center\">\n                <slot name=\"${slotName}\"></slot>\n                <span part=\"separator\" aria-hidden=\"true\">${this.separator}</span>\n              </li>\n            `)}\n        </ol>\n      </div>\n      <slot @slotchange=${this.assignSlots}></slot>\n    `;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.role = 'navigation';\n    }\n    get separator() {\n        if (this.customSeparator) {\n            const separatorClone = this.customSeparator.cloneNode(true);\n            separatorClone.removeAttribute('slot');\n            return separatorClone;\n        }\n        else {\n            return html `/`;\n        }\n    }\n    assignSlots() {\n        this.navItems = Array.from(this.children)\n            .filter(c => c.getAttribute('slot') !== 'cds-separator')\n            .map(element => {\n            element.setAttribute('slot', createId());\n            return element;\n        });\n    }\n    get slotNames() {\n        return this.navItems.map(element => element.slot);\n    }\n    static get styles() {\n        return [baseStyles, styles];\n    }\n}\n__decorate([\n    state({ type: Array })\n], CdsBreadcrumb.prototype, \"navItems\", void 0);\n__decorate([\n    querySlot('[slot=\"cds-separator\"]')\n], CdsBreadcrumb.prototype, \"customSeparator\", void 0);\n"],"names":["CdsBreadcrumb","LitElement","constructor","super","this","navItems","render","html","slotNames","map","slotName","separator","assignSlots","connectedCallback","role","customSeparator","separatorClone","cloneNode","removeAttribute","Array","from","children","filter","c","getAttribute","element","setAttribute","createId","slot","styles","baseStyles","__decorate","state","type","prototype","querySlot"],"mappings":"kNA4BO,MAAMA,UAAsBC,EAC/BC,cACIC,oBACAC,KAAKC,SAAW,GAEpBC,SACI,OAAOC,CAAK,sFAGRH,KAAKI,UAAUC,KAAIC,GAAYH,CAAK,wEAElBG,uDAC8BN,KAAKO,0DAKvCP,KAAKQ,uBAG3BC,oBACIV,MAAMU,oBACNT,KAAKU,KAAO,aAEZH,gBACA,GAAIP,KAAKW,gBAAiB,CACtB,MAAMC,EAAiBZ,KAAKW,gBAAgBE,WAAU,GAEtD,OADAD,EAAeE,gBAAgB,QACxBF,EAGP,OAAOT,CAAK,IAGpBK,cACIR,KAAKC,SAAWc,MAAMC,KAAKhB,KAAKiB,UAC3BC,QAAOC,GAAgC,kBAA3BA,EAAEC,aAAa,UAC3Bf,KAAIgB,IACLA,EAAQC,aAAa,OAAQC,KACtBF,KAGXjB,gBACA,OAAOJ,KAAKC,SAASI,KAAIgB,GAAWA,EAAQG,OAErCC,oBACP,MAAO,CAACC,EAAYD,IAG5BE,EAAW,CACPC,EAAM,CAAEC,KAAMd,SACfnB,EAAckC,UAAW,gBAAY,GACxCH,EAAW,CACPI,EAAU,2BACXnC,EAAckC,UAAW,uBAAmB"}