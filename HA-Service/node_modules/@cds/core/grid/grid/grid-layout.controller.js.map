{"version":3,"file":"grid-layout.controller.js","sources":["../../../../src/grid/grid/grid-layout.controller.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { isNumericString, listenForAttributeListChange, LogService, notProductionEnvironment, onChildListMutation, } from '@cds/core/internal';\nexport class GridLayoutController {\n    constructor(host) {\n        this.host = host;\n        this.observers = [];\n        this.host.addController(this);\n    }\n    get columns() {\n        return Array.from(this._columns ?? []);\n    }\n    get visibleColumns() {\n        return this.columns.filter(c => !c.hidden);\n    }\n    get lastVisibleColumn() {\n        return this.visibleColumns[this.host.getAttribute('dir') === 'rtl' ? 0 : this.visibleColumns.length - 1];\n    }\n    async hostConnected() {\n        await this.host.updateComplete;\n        this.updateLayout();\n        this.host.addEventListener('resizeChange', () => this.initializeColumnWidths(), { once: true, capture: true });\n        this.observers.push(onChildListMutation(this.host, async (mutation) => {\n            await this.host.updateComplete;\n            if (mutation && this.columnAddedOrRemoved(mutation)) {\n                this.updateLayout();\n            }\n        }));\n        this.observers.push(listenForAttributeListChange(this.host, ['hidden'], () => this.updateLayout()));\n    }\n    hostUpdated() {\n        if (this.host.height) {\n            this.host.style.setProperty('--body-height', isNumericString(this.host.height) ? `${this.host.height}px` : this.host.height);\n        }\n    }\n    hostDisconnected() {\n        this.observers.forEach(o => o?.disconnect());\n    }\n    columnAddedOrRemoved(mutation) {\n        return [...Array.from(mutation.removedNodes), ...Array.from(mutation.addedNodes)].find((i) => i.tagName === 'CDS-GRID-COLUMN');\n    }\n    initializeColumnWidths() {\n        if (this.host.columnLayout === 'fixed') {\n            this.visibleColumns\n                .filter(c => c.width)\n                .forEach(c => this.host.style.setProperty(`--ch${c.ariaColIndex}`, isNumericString(c.width) ? `${c.width}px` : c.width));\n            this.visibleColumns\n                .filter(c => !c.width && parseInt(c.ariaColIndex) !== this.columns.length)\n                .forEach(c => this.host.style.setProperty(`--ch${c.ariaColIndex}`, `${parseInt(getComputedStyle(c).width)}px`));\n            this.host.style.setProperty(`--ch${this.lastVisibleColumn.ariaColIndex}`, `minmax(${this.getLastColumnWidth() ?? `${parseInt(getComputedStyle(this.lastVisibleColumn).width)}px`}, 100%)`);\n        }\n    }\n    getLastColumnWidth() {\n        if (isNumericString(this.lastVisibleColumn.width)) {\n            return `${this.lastVisibleColumn.width}px`;\n        }\n        else {\n            return this.lastVisibleColumn.width ? this.lastVisibleColumn.width : null;\n        }\n    }\n    updateLayout() {\n        this._columns = this.host.columns; // create copy per update to prevent multiple DOM queries from @query getters\n        this.validateColumnLayout();\n        this.createColumnGrids();\n        this.setColumnDividers();\n    }\n    createColumnGrids() {\n        const colWidths = this.columns\n            .filter(c => !c.hidden)\n            .reduce((p, c) => {\n            const width = isNumericString(c.width) ? `${c.width}px` : c.width;\n            return `${p} ${`var(--ch${c.ariaColIndex}, ${width ? width : '1fr'})`}`;\n        }, '');\n        this.host.style.setProperty('--ch-grid', colWidths);\n    }\n    setColumnDividers() {\n        this.visibleColumns.forEach((c, i) => {\n            c.removeAttribute('draggable-hidden');\n            if (c.type === 'action' && this.visibleColumns[i + 1]?.type === 'action') {\n                c.setAttribute('draggable-hidden', '');\n            }\n        });\n        this.lastVisibleColumn?.setAttribute('draggable-hidden', '');\n    }\n    validateColumnLayout() {\n        if (notProductionEnvironment()) {\n            const visibleCells = Array.from(this.host.rows[0]?.cells ?? []).filter((c) => !c.hidden);\n            if (this.visibleColumns.length !== visibleCells?.length && visibleCells?.length !== 0) {\n                LogService.error(`Error: column mismatch, ${this.visibleColumns.length} visible column headers with ${visibleCells.length} visible cells`);\n            }\n        }\n    }\n}\n"],"names":["GridLayoutController","constructor","host","this","observers","addController","columns","Array","from","_columns","visibleColumns","filter","c","hidden","lastVisibleColumn","getAttribute","length","async","updateComplete","updateLayout","addEventListener","initializeColumnWidths","once","capture","push","onChildListMutation","mutation","columnAddedOrRemoved","listenForAttributeListChange","hostUpdated","height","style","setProperty","isNumericString","hostDisconnected","forEach","o","disconnect","removedNodes","addedNodes","find","i","tagName","columnLayout","width","ariaColIndex","parseInt","getComputedStyle","getLastColumnWidth","validateColumnLayout","createColumnGrids","setColumnDividers","colWidths","reduce","p","removeAttribute","type","setAttribute","notProductionEnvironment","visibleCells","rows","cells","LogService","error"],"mappings":"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"}