{"version":3,"file":"control-group.element.js","sources":["../../../../src/forms/control-group/control-group.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { query } from 'lit/decorators/query.js';\nimport { baseStyles, property, querySlot, querySlotAll, id, event, syncDefinedProps, describeElementByElements, setAttributes, syncProps, calculateOptimalLayout, responsive, } from '@cds/core/internal';\nimport styles from './control-group.element.scss';\nimport { getStatusIcon, controlIsWrapped, formLayouts, inlineControlListIsWrapped, defaultFormLayout, defaultControlWidth, getCurrentMessageStatus, } from '../utils/utils.js';\n/**\n * Internal Control Group\n *\n * ```typescript\n * import '@cds/core/forms/register.js';\n * ```\n *\n * ```html\n * <cds-internal-control-group>\n *   <label>...</label>\n *   <cds-control>\n *     <label></label>\n *     <input ... />\n *   </cds-control>\n *   <cds-control>\n *     <label></label>\n *     <input ... />\n *   </cds-control>\n * </cds-internal-control-group>\n * ```\n *\n * @element cds-internal-control-group\n * @slot - For projecting control group\n */\nlet CdsInternalControlGroup = class CdsInternalControlGroup extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Set the status of control group validation\n         * @type {neutral | error | success}\n         */\n        this.status = 'neutral';\n        /** @type {horizontal | horizontal-inline | vertical | vertical-inline | compact} */\n        this.layout = defaultFormLayout;\n        /** Align the labels of controls within group left or right */\n        this.controlAlign = 'left';\n        /** Disable all controls within a control group or omit and disable controls individually */\n        this.disabled = false;\n        /**\n         * Adjust the control from the default full width or the browser default width\n         * @type {stretch | shrink}\n         */\n        this.controlWidth = defaultControlWidth;\n        /**\n         * By default forms will collapse to layout that prevents overflow.\n         * If disabled control layout may break or overflow in unexpected ways.\n         */\n        this.responsive = true;\n        this.isInlineControlGroup = false;\n        this.isControlGroup = true;\n    }\n    get messagesTemplate() {\n        return html ` <div\n      ?hidden=${this.messages.length === 0}\n      cds-layout=\"horizontal align:shrink gap:xs wrap:none\"\n      class=\"messages-container\"\n    >\n      ${!this.isInlineControlGroup ? getStatusIcon(this.status) : ''}\n      <div class=\"messages\">\n        <slot name=\"message\" @slotchange=${this.updateControlMessages}></slot>\n      </div>\n    </div>`;\n    }\n    get controlsTemplate() {\n        return this.isInlineControlGroup\n            ? html `\n          <div cds-layout=\"horizontal gap:xs align:horizontal-stretch\" class=\"input-container\">\n            <div class=\"controls\" cds-layout=\"horizontal align:horizontal-stretch wrap:none\">\n              <slot name=\"controls\"></slot>\n            </div>\n            ${getStatusIcon(this.status)}\n          </div>\n        `\n            : html `\n          <div cds-layout=\"horizontal align:shrink\" class=\"input-container\">\n            <div class=\"controls\" cds-layout=\"${this.inlineControlLayout}\">\n              <slot name=\"controls\"></slot>\n            </div>\n          </div>\n        `;\n    }\n    get inlineControlLayout() {\n        return `${!this.layout.includes('inline') && this.layout !== 'compact' ? 'vertical gap:xs' : 'horizontal gap:sm'} ${!this.layout.includes('vertical') ? 'wrap:none' : ''}`;\n    }\n    get primaryLabelLayout() {\n        return !this.layout.includes('vertical') ? 'horizontal gap:lg' : 'vertical gap:xs';\n    }\n    get controlMessageLayout() {\n        return `${this.layout === 'compact' ? 'horizontal' : 'vertical'} gap:xs wrap:none align:stretch`;\n    }\n    render() {\n        return html `\n      <div class=\"private-host\" cds-layout=${this.primaryLabelLayout}>\n        <cds-internal-control-label .disabled=${this.disabled} cds-layout=\"align:top\" action=\"primary\">\n          <slot name=\"label\"></slot>\n        </cds-internal-control-label>\n        <div class=\"control-message-container\" cds-layout=${this.controlMessageLayout}>\n          ${this.controlsTemplate} ${this.messagesTemplate}\n        </div>\n      </div>\n    `;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        setAttributes(this, ['role', 'group'], ['cds-control-group', '']);\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        this.associateLabelAndGroup();\n        this.setupResponsive();\n    }\n    updated(props) {\n        super.updated(props);\n        props.set('isControlGroup', true);\n        this.controls.forEach((c) => (c.isControlGroup = true));\n        this.messages.forEach(message => syncProps(message, this, { disabled: props.has('disabled') }));\n        syncDefinedProps(props, this, Array.from(this.controls));\n    }\n    get layoutStable() {\n        return (!inlineControlListIsWrapped(Array.from(this.controls), this.layout) &&\n            !controlIsWrapped(this.controlSlot, this.controlLabel, this.layout));\n    }\n    associateLabelAndGroup() {\n        this.setAttribute('aria-labelledby', this.groupLabelId);\n        this.label.setAttribute('id', this.groupLabelId);\n    }\n    async updateControlMessages() {\n        describeElementByElements(this, Array.from(this.messages));\n        this.status = await getCurrentMessageStatus(Array.from(this.messages));\n    }\n    setupResponsive() {\n        if (this.responsive) {\n            const layoutConfig = { layouts: formLayouts, initialLayout: this.layout };\n            this.addEventListener('cdsResizeChange', () => calculateOptimalLayout(this, layoutConfig).then(() => this.layoutChange.emit(this.layout, { bubbles: true })));\n        }\n    }\n};\nCdsInternalControlGroup.styles = [baseStyles, styles];\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"status\", void 0);\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"layout\", void 0);\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"controlAlign\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsInternalControlGroup.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"controlWidth\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsInternalControlGroup.prototype, \"responsive\", void 0);\n__decorate([\n    querySlot('label', {\n        assign: 'label',\n        required: 'warning',\n        requiredMessage: 'To meet a11y standards a <label> should be provided',\n    })\n], CdsInternalControlGroup.prototype, \"label\", void 0);\n__decorate([\n    querySlotAll('cds-control, [cds-control]')\n], CdsInternalControlGroup.prototype, \"controls\", void 0);\n__decorate([\n    querySlotAll('cds-control-message')\n], CdsInternalControlGroup.prototype, \"messages\", void 0);\n__decorate([\n    query('cds-internal-control-label[action=primary]', true)\n], CdsInternalControlGroup.prototype, \"controlLabel\", void 0);\n__decorate([\n    query('.controls', true)\n], CdsInternalControlGroup.prototype, \"controlSlot\", void 0);\n__decorate([\n    id()\n], CdsInternalControlGroup.prototype, \"groupLabelId\", void 0);\n__decorate([\n    event()\n], CdsInternalControlGroup.prototype, \"layoutChange\", void 0);\nCdsInternalControlGroup = __decorate([\n    responsive()\n], CdsInternalControlGroup);\nexport { CdsInternalControlGroup };\n"],"names":["CdsInternalControlGroup","LitElement","constructor","super","this","status","layout","defaultFormLayout","controlAlign","disabled","controlWidth","defaultControlWidth","responsive","isInlineControlGroup","isControlGroup","messagesTemplate","html","messages","length","getStatusIcon","updateControlMessages","controlsTemplate","inlineControlLayout","includes","primaryLabelLayout","controlMessageLayout","render","connectedCallback","setAttributes","firstUpdated","props","associateLabelAndGroup","setupResponsive","updated","set","controls","forEach","c","message","syncProps","has","syncDefinedProps","Array","from","layoutStable","inlineControlListIsWrapped","controlIsWrapped","controlSlot","controlLabel","setAttribute","groupLabelId","label","async","describeElementByElements","getCurrentMessageStatus","layoutConfig","layouts","formLayouts","initialLayout","addEventListener","calculateOptimalLayout","then","layoutChange","emit","bubbles","styles","baseStyles","__decorate","property","type","String","prototype","Boolean","querySlot","assign","required","requiredMessage","querySlotAll","query","id","event"],"mappings":"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"}