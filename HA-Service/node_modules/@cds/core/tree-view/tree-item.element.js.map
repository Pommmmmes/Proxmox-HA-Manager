{"version":3,"file":"tree-item.element.js","sources":["../../../src/tree-view/tree-item.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { animate, AnimationTreeItemExpandName, baseStyles, createId, event, i18n, I18nService, property, querySlot, querySlotAll, reverseAnimation, } from '@cds/core/internal';\nimport { html, LitElement } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport styles from './tree-item.element.scss';\n/**\n * Tree view is a hierarchical component that gives users access to a hierarchical set of objects displayed in a the parent-child relationship.\n *\n * ```typescript\n * import '@cds/core/tree-view/register.js';\n * ```\n *\n * ```html\n *  <cds-tree>\n *    <cds-tree-item>1</cds-tree-item>\n *    <cds-tree-item>2</cds-tree-item>\n *    <cds-tree-item>3</cds-tree-item>\n *  </cds-tree>\n * ```\n *\n * @element cds-tree-item\n * @slot - Content slot for inside the tree item\n * @slot expand-collapse-icon\n * @event expandedChange - notify when the user has clicked the expand / collapse button\n * @event selectedChange - notify when the user has clicked the tree item\n * @cssprop --animation-duration\n * @cssprop --animation-easing\n * @cssprop --background\n * @cssprop --color\n * @cssprop --focus-width\n * @cssprop --font-size\n * @cssprop --font-weight\n */\nlet CdsTreeItem = class CdsTreeItem extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.i18n = I18nService.keys.treeview;\n        this.cdsMotion = 'on';\n        this.multiSelect = false;\n        this.disabled = false;\n        this.expanded = false;\n        /**\n         * @description\n         *\n         * Expandable is used (see line 124) to automatically show the cds-button-expand element when a tree-item detects that\n         * there are children. However, when doing investigation into why styles were not applied for tree-items controlled\n         * via *ngIf (or any conditional DOM and code that will put tree-item elements there at some unknown point in the\n         * future) it was re-discovered as a public property without a demo for manual usage.\n         */\n        this.expandable = false;\n        this.indeterminate = false;\n        this.loading = false;\n        this.selected = false;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.tabIndex = -1;\n        this.role = 'treeitem';\n        if (!this.id) {\n            this.id = createId();\n        }\n    }\n    updated(props) {\n        super.updated(props);\n        if (this.treeItemChildren.length > 0) {\n            this.expandable = true;\n        }\n        if (this.expandable) {\n            this.ariaExpanded = this.expanded ? 'true' : 'false';\n        }\n        else {\n            this.ariaExpanded = null;\n        }\n        if (this.multiSelect) {\n            this.ariaSelected = this.selected ? 'true' : 'false';\n        }\n        else {\n            this.ariaSelected = null;\n        }\n        this.ariaDisabled = this.disabled ? 'true' : 'false';\n    }\n    toggleExpanded() {\n        this.expandedChange.emit(!this.expanded);\n    }\n    toggleSelected() {\n        this.selectedChange.emit(!this.selected);\n        if (this.anchorLink) {\n            this.anchorLink.click();\n        }\n    }\n    onSlotChange() {\n        this.treeItemChildren.forEach(i => {\n            if (!i.getAttribute('slot')) {\n                i.setAttribute('slot', createId());\n            }\n        });\n        this.requestUpdate();\n    }\n    render() {\n        return html `\n      <div class=\"private-host\" cds-layout=\"p-l:md\">\n        <div cds-layout=\"horizontal align:vertical-center ${this.multiSelect ? 'gap:xs' : 'gap:xxs'}\">\n          <div class=\"lhs-container\">${this.treeItemLeftHandSideTemplate}</div>\n          <div\n            class=\"item-content\"\n            cds-layout=\"horizontal p:xxs align:vertical-center align:stretch\"\n            @click=\"${() => this.toggleSelected()}\"\n          >\n            <span cds-layout=\"horizontal align:vertical-center gap:sm\" cds-text=\"lhe\">\n              ${this.multiSelect\n            ? html `\n                    <cds-internal-visual-checkbox\n                      part=\"checkbox\"\n                      .disabled=\"${this.disabled}\"\n                      .indeterminate=\"${this.indeterminate}\"\n                      .selected=\"${this.selected}\"\n                    ></cds-internal-visual-checkbox>\n                  `\n            : html ``}\n              <slot @slotchange=${this.onSlotChange}></slot>\n            </span>\n          </div>\n        </div>\n        <div class=\"item-children\" role=${ifDefined(this.expanded ? 'group' : undefined)} ?hidden=\"${!this.expanded}\">\n          ${Array.from(this.treeItemChildren).map((i) => html `<slot name=\"${i.getAttribute('slot')}\"></slot>`)}\n        </div>\n      </div>\n    `;\n    }\n    /**\n     * This container contains one of the following depending on the state of the tree item:\n     *   - caret if the tree item is expandable\n     *   - progress circle if the tree item is loading its children (via an async call, etc)\n     *   - nothing if the tree item is an end node\n     *\n     * The container with a fixed width ensures the same alignment whether or not it contains\n     * a child elemeent to render.\n     */\n    /** @private */\n    get treeItemLeftHandSideTemplate() {\n        if (this.loading) {\n            return html ` <cds-progress-circle size=\"xs\" aria-label=\"${this.i18n.loading}\"></cds-progress-circle> `;\n        }\n        else if (this.expandable) {\n            return html `\n        <div @click=\"${() => this.toggleExpanded()}\">\n          <cds-button-expand\n            .expanded=${this.expanded}\n            readonly\n            action=\"vertical\"\n            part=\"expand-collapse-icon\"\n          ></cds-button-expand>\n        </div>\n      `;\n        }\n        else {\n            return html ``;\n        }\n    }\n    static get styles() {\n        return [baseStyles, styles];\n    }\n};\n__decorate([\n    i18n()\n], CdsTreeItem.prototype, \"i18n\", void 0);\n__decorate([\n    property({ type: String })\n], CdsTreeItem.prototype, \"cdsMotion\", void 0);\n__decorate([\n    event()\n], CdsTreeItem.prototype, \"cdsMotionChange\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true, attribute: 'multi-select' })\n], CdsTreeItem.prototype, \"multiSelect\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsTreeItem.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CdsTreeItem.prototype, \"expanded\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CdsTreeItem.prototype, \"expandable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CdsTreeItem.prototype, \"indeterminate\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CdsTreeItem.prototype, \"loading\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CdsTreeItem.prototype, \"selected\", void 0);\n__decorate([\n    querySlotAll(':scope > cds-tree-item')\n], CdsTreeItem.prototype, \"treeItemChildren\", void 0);\n__decorate([\n    querySlot(':scope > a')\n], CdsTreeItem.prototype, \"anchorLink\", void 0);\n__decorate([\n    event()\n], CdsTreeItem.prototype, \"expandedChange\", void 0);\n__decorate([\n    event()\n], CdsTreeItem.prototype, \"selectedChange\", void 0);\nCdsTreeItem = __decorate([\n    animate({\n        expanded: {\n            true: AnimationTreeItemExpandName,\n            false: reverseAnimation(AnimationTreeItemExpandName),\n        },\n    })\n], CdsTreeItem);\nexport { CdsTreeItem };\n"],"names":["CdsTreeItem","LitElement","constructor","super","this","i18n","I18nService","keys","treeview","cdsMotion","multiSelect","disabled","expanded","expandable","indeterminate","loading","selected","connectedCallback","tabIndex","role","id","createId","updated","props","treeItemChildren","length","ariaExpanded","ariaSelected","ariaDisabled","toggleExpanded","expandedChange","emit","toggleSelected","selectedChange","anchorLink","click","onSlotChange","forEach","i","getAttribute","setAttribute","requestUpdate","render","html","treeItemLeftHandSideTemplate","ifDefined","undefined","Array","from","map","styles","baseStyles","__decorate","prototype","property","type","String","event","Boolean","reflect","attribute","querySlotAll","querySlot","animate","true","AnimationTreeItemExpandName","false","reverseAnimation"],"mappings":"yYAsCG,IAACA,EAAc,cAA0BC,EACxCC,cACIC,oBACAC,KAAKC,KAAOC,EAAYC,KAAKC,SAC7BJ,KAAKK,UAAY,KACjBL,KAAKM,aAAc,EACnBN,KAAKO,UAAW,EAChBP,KAAKQ,UAAW,EAShBR,KAAKS,YAAa,EAClBT,KAAKU,eAAgB,EACrBV,KAAKW,SAAU,EACfX,KAAKY,UAAW,EAEpBC,oBACId,MAAMc,oBACNb,KAAKc,UAAY,EACjBd,KAAKe,KAAO,WACPf,KAAKgB,KACNhB,KAAKgB,GAAKC,KAGlBC,QAAQC,GACJpB,MAAMmB,QAAQC,GACVnB,KAAKoB,iBAAiBC,OAAS,IAC/BrB,KAAKS,YAAa,GAElBT,KAAKS,WACLT,KAAKsB,aAAetB,KAAKQ,SAAW,OAAS,QAG7CR,KAAKsB,aAAe,KAEpBtB,KAAKM,YACLN,KAAKuB,aAAevB,KAAKY,SAAW,OAAS,QAG7CZ,KAAKuB,aAAe,KAExBvB,KAAKwB,aAAexB,KAAKO,SAAW,OAAS,QAEjDkB,iBACIzB,KAAK0B,eAAeC,MAAM3B,KAAKQ,UAEnCoB,iBACI5B,KAAK6B,eAAeF,MAAM3B,KAAKY,UAC3BZ,KAAK8B,YACL9B,KAAK8B,WAAWC,QAGxBC,eACIhC,KAAKoB,iBAAiBa,SAAQC,IACrBA,EAAEC,aAAa,SAChBD,EAAEE,aAAa,OAAQnB,QAG/BjB,KAAKqC,gBAETC,SACI,OAAOC,CAAK,mGAEwCvC,KAAKM,YAAc,SAAW,yCACnDN,KAAKwC,yIAItB,IAAMxC,KAAK4B,+FAGjB5B,KAAKM,YACPiC,CAAK,4DAGgBvC,KAAKO,6BACAP,KAAKU,6BACVV,KAAKY,4CAG1B2B,CAAK,wBACevC,KAAKgC,4EAIGS,EAAUzC,KAAKQ,SAAW,aAAUkC,iBAAwB1C,KAAKQ,aAC/FmC,MAAMC,KAAK5C,KAAKoB,kBAAkByB,KAAKX,GAAMK,CAAK,eAAeL,EAAEC,aAAa,mCAepFK,mCACA,OAAIxC,KAAKW,QACE4B,CAAK,8CAA+CvC,KAAKC,KAAKU,kCAEhEX,KAAKS,WACH8B,CAAK,gBACD,IAAMvC,KAAKyB,mDAEVzB,KAAKQ,yGASV+B,CAAK,GAGTO,oBACP,MAAO,CAACC,EAAYD,KAG5BE,EAAW,CACP/C,KACDL,EAAYqD,UAAW,YAAQ,GAClCD,EAAW,CACPE,EAAS,CAAEC,KAAMC,UAClBxD,EAAYqD,UAAW,iBAAa,GACvCD,EAAW,CACPK,KACDzD,EAAYqD,UAAW,uBAAmB,GAC7CD,EAAW,CACPE,EAAS,CAAEC,KAAMG,QAASC,SAAS,EAAMC,UAAW,kBACrD5D,EAAYqD,UAAW,mBAAe,GACzCD,EAAW,CACPE,EAAS,CAAEC,KAAMG,WAClB1D,EAAYqD,UAAW,gBAAY,GACtCD,EAAW,CACPE,EAAS,CAAEC,KAAMG,QAASC,SAAS,KACpC3D,EAAYqD,UAAW,gBAAY,GACtCD,EAAW,CACPE,EAAS,CAAEC,KAAMG,QAASC,SAAS,KACpC3D,EAAYqD,UAAW,kBAAc,GACxCD,EAAW,CACPE,EAAS,CAAEC,KAAMG,QAASC,SAAS,KACpC3D,EAAYqD,UAAW,qBAAiB,GAC3CD,EAAW,CACPE,EAAS,CAAEC,KAAMG,QAASC,SAAS,KACpC3D,EAAYqD,UAAW,eAAW,GACrCD,EAAW,CACPE,EAAS,CAAEC,KAAMG,QAASC,SAAS,KACpC3D,EAAYqD,UAAW,gBAAY,GACtCD,EAAW,CACPS,EAAa,2BACd7D,EAAYqD,UAAW,wBAAoB,GAC9CD,EAAW,CACPU,EAAU,eACX9D,EAAYqD,UAAW,kBAAc,GACxCD,EAAW,CACPK,KACDzD,EAAYqD,UAAW,sBAAkB,GAC5CD,EAAW,CACPK,KACDzD,EAAYqD,UAAW,sBAAkB,GAC5CrD,EAAcoD,EAAW,CACrBW,EAAQ,CACJnD,SAAU,CACNoD,KAAMC,EACNC,MAAOC,EAAiBF,OAGjCjE"}