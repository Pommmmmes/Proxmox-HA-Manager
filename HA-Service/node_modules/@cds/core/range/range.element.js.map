{"version":3,"file":"range.element.js","sources":["../../../src/range/range.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { getElementUpdates, globalStyle } from '@cds/core/internal';\nimport { CdsControl } from '@cds/core/forms';\nimport globalStyles from './range.global.scss';\nimport styles from './range.element.scss';\n/**\n * Range\n *\n * ```typescript\n * import '@cds/core/range/register.js';\n * ```\n *\n * ```html\n * <cds-range>\n *   <label>range</label>\n *   <input type=\"range\" />\n *   <cds-control-message>message text</cds-control-message>\n * </cds-range>\n * ```\n *\n * @element cds-range\n * @slot - For projecting range input\n * @cssprop --background\n * @cssprop --border-radius\n * @cssprop --track-background\n * @cssprop --track-fill-background\n * @cssprop --track-height\n * @cssprop --thumb-background\n * @cssprop --thumb-width\n * @cssprop --thumb-height\n */\nexport class CdsRange extends CdsControl {\n    constructor() {\n        super(...arguments);\n        this.globalStyles = globalStyles;\n    }\n    static get styles() {\n        return [...super.styles, styles];\n    }\n    get inputTemplate() {\n        return html `<div class=\"input-track\"></div>`;\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        this.setTrackWidth();\n        this.inputControl.addEventListener('input', () => this.setTrackWidth());\n        // `input` event doesnt fire when the value is changed programmatically\n        // at this point, inputControl.valueAsNumber is still the old value\n        // https://github.com/vmware-clarity/core/issues/157\n        this.observers.push(getElementUpdates(this.inputControl, 'value', (value) => {\n            this.setTrackWidth(value);\n        }));\n    }\n    setTrackWidth(val) {\n        const value = val ?? this.inputControl.valueAsNumber;\n        const min = this.inputControl.min ? parseInt(this.inputControl.min) : 0;\n        const max = this.inputControl.max ? parseInt(this.inputControl.max) : 100;\n        this.style.setProperty('--track-width', `${Math.floor(((value - min) / (max - min)) * 100)}%`);\n    }\n}\n__decorate([\n    globalStyle()\n], CdsRange.prototype, \"globalStyles\", void 0);\n"],"names":["CdsRange","CdsControl","constructor","super","this","globalStyles","styles","inputTemplate","html","firstUpdated","props","setTrackWidth","inputControl","addEventListener","observers","push","getElementUpdates","value","val","valueAsNumber","min","parseInt","max","style","setProperty","Math","floor","__decorate","globalStyle","prototype"],"mappings":"gQAqCO,MAAMA,UAAiBC,EAC1BC,cACIC,oBACAC,KAAKC,aAAeA,EAEbC,oBACP,MAAO,IAAIH,MAAMG,OAAQA,GAEzBC,oBACA,OAAOC,CAAK,kCAEhBC,aAAaC,GACTP,MAAMM,aAAaC,GACnBN,KAAKO,gBACLP,KAAKQ,aAAaC,iBAAiB,SAAS,IAAMT,KAAKO,kBAIvDP,KAAKU,UAAUC,KAAKC,EAAkBZ,KAAKQ,aAAc,SAAUK,IAC/Db,KAAKO,cAAcM,OAG3BN,cAAcO,GACV,MAAMD,EAAQC,GAAOd,KAAKQ,aAAaO,cACjCC,EAAMhB,KAAKQ,aAAaQ,IAAMC,SAASjB,KAAKQ,aAAaQ,KAAO,EAChEE,EAAMlB,KAAKQ,aAAaU,IAAMD,SAASjB,KAAKQ,aAAaU,KAAO,IACtElB,KAAKmB,MAAMC,YAAY,gBAAoBC,KAAKC,OAAQT,EAAQG,IAAQE,EAAMF,GAAQ,KAA9C,MAGhDO,EAAW,CACPC,KACD5B,EAAS6B,UAAW,oBAAgB"}