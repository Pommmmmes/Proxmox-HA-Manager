{"version":3,"file":"lit.js","sources":["../../../../src/internal/utils/lit.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { render } from 'lit';\n/**\n * Returns a promise when all components have completed rendering one cycle.\n */\nexport function childrenUpdateComplete(elements) {\n    return Promise.all(Array.from(elements).map(e => e.updateComplete));\n}\n/**\n * Set all properties that are in common with a parent group and child components.\n * This is helpful when providing convenience group/wrapper components that set the state\n * of child slotted elements (cds-form-group, cds-control-group). Typically call\n * during the `firstUpdated` or `updated` lifecycle.\n */\nexport function syncDefinedProps(props, source, targets) {\n    props.forEach((_value, key) => targets.filter(t => t && t[key] !== undefined).forEach(t => (t[key] = source[key])));\n}\n/**\n * Set all common properties between two instances with given conditions. This is\n * helpful for setting child component properties from the parent given certain\n * conditions.\n */\nexport function syncProps(target, source, conditions) {\n    Object.keys(conditions)\n        .filter(c => conditions[c])\n        .forEach(c => (target[c] = source[c]));\n}\nexport function syncPropsForAllItems(targets, source, conditions) {\n    targets.forEach(target => syncProps(target, source, conditions));\n}\n/** given an element and prop map, determine if property was updated during the updated lifecycle */\nexport function propUpdated(element, props, prop) {\n    return props.has(prop) && element[prop] !== props.get(prop);\n}\nexport function renderBefore(value, container, options) {\n    const el = document.createElement('div');\n    container.prepend(el);\n    render(value, container, { renderBefore: el, ...options });\n    const rendered = el.previousSibling;\n    el.remove();\n    return rendered;\n}\nexport function renderAfter(value, container, options) {\n    const el = document.createElement('div');\n    container.appendChild(el);\n    render(value, container, { renderBefore: el, ...options });\n    const rendered = el.previousSibling;\n    el.remove();\n    return rendered;\n}\n"],"names":["childrenUpdateComplete","elements","Promise","all","Array","from","map","e","updateComplete","syncDefinedProps","props","source","targets","forEach","_value","key","filter","t","undefined","syncProps","target","conditions","Object","keys","c","syncPropsForAllItems","propUpdated","element","prop","has","get","renderBefore","value","container","options","el","document","createElement","prepend","render","rendered","previousSibling","remove","renderAfter","appendChild"],"mappings":"6BASO,SAASA,EAAuBC,GACnC,OAAOC,QAAQC,IAAIC,MAAMC,KAAKJ,GAAUK,KAAIC,GAAKA,EAAEC,kBAQhD,SAASC,EAAiBC,EAAOC,EAAQC,GAC5CF,EAAMG,SAAQ,CAACC,EAAQC,IAAQH,EAAQI,QAAOC,GAAKA,QAAgBC,IAAXD,EAAEF,KAAoBF,SAAQI,GAAMA,EAAEF,GAAOJ,EAAOI,OAOzG,SAASI,EAAUC,EAAQT,EAAQU,GACtCC,OAAOC,KAAKF,GACPL,QAAOQ,GAAKH,EAAWG,KACvBX,SAAQW,GAAMJ,EAAOI,GAAKb,EAAOa,KAEnC,SAASC,EAAqBb,EAASD,EAAQU,GAClDT,EAAQC,SAAQO,GAAUD,EAAUC,EAAQT,EAAQU,KAGjD,SAASK,EAAYC,EAASjB,EAAOkB,GACxC,OAAOlB,EAAMmB,IAAID,IAASD,EAAQC,KAAUlB,EAAMoB,IAAIF,GAEnD,SAASG,EAAaC,EAAOC,EAAWC,GAC3C,MAAMC,EAAKC,SAASC,cAAc,OAClCJ,EAAUK,QAAQH,GAClBI,EAAOP,EAAOC,EAAW,CAAEF,aAAcI,KAAOD,IAChD,MAAMM,EAAWL,EAAGM,gBAEpB,OADAN,EAAGO,SACIF,EAEJ,SAASG,EAAYX,EAAOC,EAAWC,GAC1C,MAAMC,EAAKC,SAASC,cAAc,OAClCJ,EAAUW,YAAYT,GACtBI,EAAOP,EAAOC,EAAW,CAAEF,aAAcI,KAAOD,IAChD,MAAMM,EAAWL,EAAGM,gBAEpB,OADAN,EAAGO,SACIF"}