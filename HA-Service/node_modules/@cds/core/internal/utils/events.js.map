{"version":3,"file":"events.js","sources":["../../../../src/internal/utils/events.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { isJsdomTest } from './environment.js';\nexport function stopEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\nexport const getElementUpdates = (element, propertyKey, callback) => {\n    if (element.hasAttribute(propertyKey)) {\n        callback(element.getAttribute(propertyKey));\n    }\n    else if (element[propertyKey] !== undefined) {\n        callback(element[propertyKey]);\n    }\n    // React: disable input tracker to setup property observer. React re-creates tracker on input changes\n    // https://github.com/facebook/react/blob/9198a5cec0936a21a5ba194a22fcbac03eba5d1d/packages/react-dom/src/client/inputValueTracking.js#L51\n    // https://github.com/vmware/clarity/issues/5625\n    if (element._valueTracker && (propertyKey === 'checked' || propertyKey === 'value')) {\n        element._valueTracker = null;\n    }\n    const updatedProp = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(element), propertyKey);\n    //  Tests using JSDom break defining a new property, so skip\n    if (updatedProp && !isJsdomTest()) {\n        Object.defineProperty(element, propertyKey, {\n            get: updatedProp.get,\n            set: val => {\n                callback(val);\n                updatedProp.set.call(element, val);\n            },\n        });\n    }\n    return listenForAttributeChange(element, propertyKey, val => callback(val));\n};\nexport function onFirstInteraction(element) {\n    return new Promise(resolve => {\n        const update = () => {\n            resolve(null);\n            element.__cdsTouched = true;\n        };\n        if (element.__cdsTouched) {\n            resolve(null);\n        }\n        element.addEventListener('mouseover', update, { once: true, passive: true });\n        element.addEventListener('touchstart', update, { once: true, passive: true }); // avoid click related events to prevent SRs like NVDA from anouncing \"clickable\" https://github.com/nvaccess/nvda/issues/5830\n        element.addEventListener('keydown', update, { once: true, passive: true });\n        element.addEventListener('focus', update, { once: true, passive: true });\n    });\n}\nexport function onChildListMutation(element, fn) {\n    const observer = new MutationObserver(mutations => {\n        for (const mutation of mutations) {\n            if (mutation.type === 'childList') {\n                fn(mutation);\n            }\n        }\n    });\n    observer.observe(element, { childList: true });\n    return observer;\n}\nexport function listenForAttributeChange(element, attrName, fn) {\n    const observer = new MutationObserver(mutations => {\n        if (mutations.find(m => m.attributeName === attrName)) {\n            fn(element.getAttribute(attrName));\n        }\n    });\n    observer.observe(element, { attributes: true });\n    return observer;\n}\nexport function listenForAttributeListChange(element, attrNames, fn) {\n    const observer = new MutationObserver(mutations => {\n        const mutation = mutations.find(m => attrNames.find(i => m.attributeName === i));\n        if (mutation) {\n            fn(element.getAttribute(mutation.attributeName));\n        }\n    });\n    observer.observe(element, { attributes: true, attributeFilter: attrNames, subtree: true });\n    return observer;\n}\n"],"names":["stopEvent","event","preventDefault","stopPropagation","getElementUpdates","element","propertyKey","callback","hasAttribute","getAttribute","undefined","_valueTracker","updatedProp","Object","getOwnPropertyDescriptor","getPrototypeOf","isJsdomTest","defineProperty","get","set","val","call","listenForAttributeChange","onFirstInteraction","Promise","resolve","update","__cdsTouched","addEventListener","once","passive","onChildListMutation","fn","observer","MutationObserver","mutations","mutation","type","observe","childList","attrName","find","m","attributeName","attributes","listenForAttributeListChange","attrNames","i","attributeFilter","subtree"],"mappings":"+CAMO,SAASA,EAAUC,GACtBA,EAAMC,iBACND,EAAME,kBAEE,MAACC,EAAoB,CAACC,EAASC,EAAaC,KAChDF,EAAQG,aAAaF,GACrBC,EAASF,EAAQI,aAAaH,SAEAI,IAAzBL,EAAQC,IACbC,EAASF,EAAQC,KAKjBD,EAAQM,eAAkC,YAAhBL,GAA6C,UAAhBA,IACvDD,EAAQM,cAAgB,MAE5B,MAAMC,EAAcC,OAAOC,yBAAyBD,OAAOE,eAAeV,GAAUC,GAWpF,OATIM,IAAgBI,KAChBH,OAAOI,eAAeZ,EAASC,EAAa,CACxCY,IAAKN,EAAYM,IACjBC,IAAKC,IACDb,EAASa,GACTR,EAAYO,IAAIE,KAAKhB,EAASe,MAInCE,EAAyBjB,EAASC,GAAac,GAAOb,EAASa,MAEnE,SAASG,EAAmBlB,GAC/B,OAAO,IAAImB,SAAQC,IACf,MAAMC,EAAS,KACXD,EAAQ,MACRpB,EAAQsB,cAAe,GAEvBtB,EAAQsB,cACRF,EAAQ,MAEZpB,EAAQuB,iBAAiB,YAAaF,EAAQ,CAAEG,MAAM,EAAMC,SAAS,IACrEzB,EAAQuB,iBAAiB,aAAcF,EAAQ,CAAEG,MAAM,EAAMC,SAAS,IACtEzB,EAAQuB,iBAAiB,UAAWF,EAAQ,CAAEG,MAAM,EAAMC,SAAS,IACnEzB,EAAQuB,iBAAiB,QAASF,EAAQ,CAAEG,MAAM,EAAMC,SAAS,OAGlE,SAASC,EAAoB1B,EAAS2B,GACzC,MAAMC,EAAW,IAAIC,kBAAiBC,IAClC,IAAK,MAAMC,KAAYD,EACG,cAAlBC,EAASC,MACTL,EAAGI,MAKf,OADAH,EAASK,QAAQjC,EAAS,CAAEkC,WAAW,IAChCN,EAEJ,SAASX,EAAyBjB,EAASmC,EAAUR,GACxD,MAAMC,EAAW,IAAIC,kBAAiBC,IAC9BA,EAAUM,MAAKC,GAAKA,EAAEC,gBAAkBH,KACxCR,EAAG3B,EAAQI,aAAa+B,OAIhC,OADAP,EAASK,QAAQjC,EAAS,CAAEuC,YAAY,IACjCX,EAEJ,SAASY,EAA6BxC,EAASyC,EAAWd,GAC7D,MAAMC,EAAW,IAAIC,kBAAiBC,IAClC,MAAMC,EAAWD,EAAUM,MAAKC,GAAKI,EAAUL,MAAKM,GAAKL,EAAEC,gBAAkBI,MACzEX,GACAJ,EAAG3B,EAAQI,aAAa2B,EAASO,mBAIzC,OADAV,EAASK,QAAQjC,EAAS,CAAEuC,YAAY,EAAMI,gBAAiBF,EAAWG,SAAS,IAC5EhB"}