{"version":3,"file":"keycodes.js","sources":["../../../../src/internal/utils/keycodes.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { KeyCodeService } from '../services/keycodes.service.js';\n/**\n * keyWasEvented() checks to see if a given key is part of any KeyboardEvent it is passed.\n */\nexport function keyWasEvented(evt, whichKey) {\n    // evt.key support goes all the way back to IE9; we don't need evt.keyCode for IE support!\n    return KeyCodeService.getCode(whichKey) === evt.key;\n}\n/**\n * checkModifierKey() tests if a special key (Ctrl, Alt, Meta, Shift) part of a KeyboardEvent.\n */\nfunction checkModifierKey(evt, key) {\n    switch (key) {\n        case 'ctrl':\n            return evt.ctrlKey;\n        case 'alt':\n            return evt.altKey;\n        case 'shift':\n            return evt.shiftKey;\n        case 'cmd':\n        case 'win':\n        case 'meta':\n            return evt.metaKey;\n        default:\n            return false;\n    }\n}\n// handlers -> single keys or any of a collection of keys\n/**\n * onKey() takes a single key and fires a handler if that key is part of\n * the KeyboardEvent it was passed.\n */\nexport function onKey(whichKey, evt, handler) {\n    if (keyWasEvented(evt, whichKey)) {\n        handler();\n    }\n}\n/**\n * onAnyKey() takes an array of keys and fires a handler if any of the keys are part of\n * the KeyboardEvent it was passed.\n */\nexport function onAnyKey(whichKeys, evt, handler) {\n    const eventedKeys = whichKeys.filter(k => {\n        return keyWasEvented(evt, k);\n    });\n    if (eventedKeys.length > 0) {\n        handler();\n    }\n}\n// key combos\n/**\n * onKeyCombo() takes a string representation of a combination of keys and modifier keys such as\n * 'ctrl+shift+a'.\n *\n * onKeyCombo() does not make accommodation for the '+' symbol in a key combo. Consider using 'ctrl+shift+='.\n *\n * onKeyCombo() accounts for 'cmd', 'win', and 'meta' keys inside keycombos. 'cmd+K', 'win+K', and 'meta+K'\n * are all the same thing to onKeyCombo().\n */\nexport function onKeyCombo(whichKeyCombo, evt, handler) {\n    if (wereModifierComboKeysPressed(whichKeyCombo, evt) && wereNonModifierComboKeysPressed(whichKeyCombo, evt)) {\n        handler();\n    }\n}\n// key combo helpers\nconst modifierKeys = ['ctrl', 'alt', 'shift', 'meta', 'cmd', 'win'];\n/**\n * getModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * special keys in the keycombo.\n */\nexport function getModifierKeysFromKeyCombo(keyCombo) {\n    // note: at some point, we may have to handle a situation of 'ctrl++' or 'ctrl+plus'\n    // it's unlikely so i'm not over-coding for it right now\n    return keyCombo.split('+').filter(k => {\n        return modifierKeys.indexOf(k) > -1;\n    });\n}\n/**\n * removeModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * non-special keys in the keycombo.\n */\nexport function removeModifierKeysFromKeyCombo(keyCombo) {\n    return keyCombo.split('+').filter(k => {\n        return modifierKeys.indexOf(k) < 0;\n    });\n}\n/**\n * wereModifierComboKeysPressed() tests if ALL special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent keycombo.\n *\n * @private\n *\n */\nfunction wereModifierComboKeysPressed(keyCombo, evt) {\n    const modifierKeyArray = getModifierKeysFromKeyCombo(keyCombo);\n    if (modifierKeyArray.length === 0) {\n        return true;\n    }\n    return modifierKeyArray.reduce((acc, currentKey) => acc && checkModifierKey(evt, currentKey), true);\n}\n/**\n * wereNonModifierComboKeysPressed() tests if non-special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent.\n *\n * @private\n *\n */\nfunction wereNonModifierComboKeysPressed(keyCombo, evt) {\n    const keyArray = removeModifierKeysFromKeyCombo(keyCombo);\n    if (keyArray.length === 0) {\n        return true;\n    }\n    return keyArray.reduce((acc, currentKey) => acc && keyWasEvented(evt, currentKey), true);\n}\nexport function validKeyNavigationCode(e) {\n    return (e.code === KeyNavigationCode.ArrowUp ||\n        e.code === KeyNavigationCode.ArrowDown ||\n        e.code === KeyNavigationCode.ArrowLeft ||\n        e.code === KeyNavigationCode.ArrowRight ||\n        e.code === KeyNavigationCode.End ||\n        e.code === KeyNavigationCode.Home ||\n        e.code === KeyNavigationCode.PageUp ||\n        e.code === KeyNavigationCode.PageDown);\n}\nexport var KeyNavigationCode;\n(function (KeyNavigationCode) {\n    KeyNavigationCode[\"ArrowUp\"] = \"ArrowUp\";\n    KeyNavigationCode[\"ArrowDown\"] = \"ArrowDown\";\n    KeyNavigationCode[\"ArrowLeft\"] = \"ArrowLeft\";\n    KeyNavigationCode[\"ArrowRight\"] = \"ArrowRight\";\n    KeyNavigationCode[\"End\"] = \"End\";\n    KeyNavigationCode[\"Home\"] = \"Home\";\n    KeyNavigationCode[\"PageUp\"] = \"PageUp\";\n    KeyNavigationCode[\"PageDown\"] = \"PageDown\";\n})(KeyNavigationCode || (KeyNavigationCode = {}));\n"],"names":["keyWasEvented","evt","whichKey","KeyCodeService","getCode","key","onKey","handler","onAnyKey","whichKeys","filter","k","length","onKeyCombo","whichKeyCombo","keyCombo","modifierKeyArray","getModifierKeysFromKeyCombo","reduce","acc","currentKey","ctrlKey","altKey","shiftKey","metaKey","checkModifierKey","wereModifierComboKeysPressed","keyArray","removeModifierKeysFromKeyCombo","wereNonModifierComboKeysPressed","modifierKeys","split","indexOf","validKeyNavigationCode","e","code","KeyNavigationCode","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","End","Home","PageUp","PageDown"],"mappings":"iEASO,SAASA,EAAcC,EAAKC,GAE/B,OAAOC,EAAeC,QAAQF,KAAcD,EAAII,IA0B7C,SAASC,EAAMJ,EAAUD,EAAKM,GAC7BP,EAAcC,EAAKC,IACnBK,IAOD,SAASC,EAASC,EAAWR,EAAKM,GACjBE,EAAUC,QAAOC,GAC1BX,EAAcC,EAAKU,KAEdC,OAAS,GACrBL,IAaD,SAASM,EAAWC,EAAeb,EAAKM,IAkC/C,SAAsCQ,EAAUd,GAC5C,MAAMe,EAAmBC,EAA4BF,GACrD,OAAgC,IAA5BC,EAAiBJ,QAGdI,EAAiBE,QAAO,CAACC,EAAKC,IAAeD,GAvFxD,SAA0BlB,EAAKI,GAC3B,OAAQA,GACJ,IAAK,OACD,OAAOJ,EAAIoB,QACf,IAAK,MACD,OAAOpB,EAAIqB,OACf,IAAK,QACD,OAAOrB,EAAIsB,SACf,IAAK,MACL,IAAK,MACL,IAAK,OACD,OAAOtB,EAAIuB,QACf,QACI,OAAO,GA0E4CC,CAAiBxB,EAAKmB,KAAa,IAtC1FM,CAA6BZ,EAAeb,IA+CpD,SAAyCc,EAAUd,GAC/C,MAAM0B,EAAWC,EAA+Bb,GAChD,OAAwB,IAApBY,EAASf,QAGNe,EAAST,QAAO,CAACC,EAAKC,IAAeD,GAAOnB,EAAcC,EAAKmB,KAAa,GApD3BS,CAAgCf,EAAeb,IACnGM,IAIR,MAAMuB,EAAe,CAAC,OAAQ,MAAO,QAAS,OAAQ,MAAO,OAKtD,SAASb,EAA4BF,GAGxC,OAAOA,EAASgB,MAAM,KAAKrB,QAAOC,GACvBmB,EAAaE,QAAQrB,IAAM,IAOnC,SAASiB,EAA+Bb,GAC3C,OAAOA,EAASgB,MAAM,KAAKrB,QAAOC,GACvBmB,EAAaE,QAAQrB,GAAK,IA+BlC,SAASsB,EAAuBC,GACnC,OAAQA,EAAEC,OAASC,EAAkBC,SACjCH,EAAEC,OAASC,EAAkBE,WAC7BJ,EAAEC,OAASC,EAAkBG,WAC7BL,EAAEC,OAASC,EAAkBI,YAC7BN,EAAEC,OAASC,EAAkBK,KAC7BP,EAAEC,OAASC,EAAkBM,MAC7BR,EAAEC,OAASC,EAAkBO,QAC7BT,EAAEC,OAASC,EAAkBQ,SAE3B,IAACR,GACX,SAAWA,GACPA,EAA2B,QAAI,UAC/BA,EAA6B,UAAI,YACjCA,EAA6B,UAAI,YACjCA,EAA8B,WAAI,aAClCA,EAAuB,IAAI,MAC3BA,EAAwB,KAAI,OAC5BA,EAA0B,OAAI,SAC9BA,EAA4B,SAAI,WARpC,CASGA,IAAsBA,EAAoB"}