{"version":3,"file":"identity.js","sources":["../../../../src/internal/utils/identity.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport is from 'ramda/es/is';\nimport isEmpty from 'ramda/es/isEmpty';\nexport function isNil(val) {\n    return val === null || val === undefined;\n}\nexport function isNilOrEmpty(val) {\n    return isNil(val) || isEmpty(val);\n}\nexport function isString(val) {\n    return is(String, val);\n}\nexport function isNumericString(val) {\n    return isString(val) && !isEmpty(val.trim()) && +val === +val;\n}\nexport function isStringOrNil(val) {\n    return is(String, val) || isNil(val);\n}\nexport function isStringAndNotNilOrEmpty(val) {\n    return isString(val) && !isNil(val) && !isEmpty(val);\n}\nexport function isObject(val) {\n    return is(Object, val);\n}\nexport function isMap(val) {\n    return is(Map, val);\n}\nexport function isObjectAndNotNilOrEmpty(val) {\n    return !isNilOrEmpty(val) && isObject(val);\n}\nexport function hasPropertyChanged(val, oldVal) {\n    return val !== oldVal;\n}\n// marks nil values (undefined, null, empty string) as changed\nexport function hasStringPropertyChanged(val, oldVal) {\n    return isStringOrNil(val) && hasPropertyChanged(val, oldVal);\n}\n// ignores nil values when checking for changes\nexport function hasStringPropertyChangedAndNotNil(val, oldVal) {\n    return !isNilOrEmpty(val) && hasPropertyChanged(val, oldVal);\n}\nexport function getEnumValues(enumeration) {\n    return Object.values(enumeration);\n}\nexport function createId(prefix = '_') {\n    return `${prefix}${Math.random().toString(36).substr(2, 9)}`;\n}\n// simplistic way to test objects for equality\n// note that it ignores/removes methods from objects\nexport function objectNaiveDeepEquals(obj1, obj2) {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\nexport function getFromObjectPath(path, dataObj, fallback = `$\\{${path}}`) {\n    return path.split('.').reduce((res, key) => {\n        try {\n            const val = res[key];\n            switch (true) {\n                case val === null:\n                case val === false:\n                case val === '':\n                case val === 0:\n                    return val;\n                default:\n                    return val || fallback;\n            }\n        }\n        catch {\n            return fallback;\n        }\n    }, dataObj);\n}\n// used by deepClone() tested through integration\nfunction cloneMap(mp) {\n    const clonedMap = new Map();\n    for (const [key, val] of mp) {\n        if (isMap(val)) {\n            clonedMap.set(key, cloneMap(val));\n        }\n        else {\n            clonedMap.set(key, val);\n        }\n    }\n    return clonedMap;\n}\nexport function deepClone(obj) {\n    // this will clone almost anything (maps, arrays, objects, etc.) to the lowest of the low levels\n    // be careful using this carelessly b/c it CAN have performance implications!\n    switch (true) {\n        case isMap(obj):\n            return cloneMap(obj);\n        case isObject(obj) && !Array.isArray(obj):\n            return mergeObjects({}, obj);\n        default:\n            return JSON.parse(JSON.stringify(obj));\n    }\n}\n/* c8 ignore next 2 */\nexport function convertAttributeStringValuesToValue(stringValue) {\n    switch (true) {\n        case stringValue === 'true':\n            return true;\n        case stringValue === 'false':\n            return false;\n        case stringValue === 'null':\n            return null;\n        case stringValue === 'undefined':\n            return void 0; // undefined\n        case isNumericString(stringValue):\n            return +stringValue;\n        default:\n            // else it's a string and that's ok\n            return stringValue;\n    }\n}\n// this utility is a little restrictive on its inputs. it expects a specific format.\n// going outside of that format (like passing an object or function as the value) can yield unintended results.\n// this does NOT eval anything. that would be bad.\n// 'isValid:true status:success': string =>\n// [['isValid', true], ['status', 'success']]: [string, string | number | boolean][]\nexport function convertStringPropValuePairsToTuple(propValString) {\n    // starts as a string like... \"isValid:true status:success\"\n    return propValString\n        .split(' ')\n        .map(str => str.split(':'))\n        .map(pv => {\n        const [propname, propValAsString] = pv;\n        return [propname, convertAttributeStringValuesToValue(propValAsString)];\n    });\n    // returns as [['isValid', true], ['status', 'success']]\n}\nexport function anyOrAllPropertiesPass(obj, propValuePairs, anyOrAll) {\n    if (!propValuePairs) {\n        return true;\n    }\n    const tests = convertStringPropValuePairsToTuple(propValuePairs);\n    if (!obj) {\n        return false;\n    }\n    if (tests.length < 1) {\n        return true;\n    }\n    else {\n        const testResults = tests.filter(pvArry => {\n            const [propname, expectedVal] = pvArry;\n            return doesPropertyPass(obj, propname, expectedVal);\n        });\n        return anyOrAll === 'all' ? testResults.length === tests.length : testResults.length > 0;\n    }\n}\nexport function allPropertiesPass(obj, propValuePairs) {\n    return anyOrAllPropertiesPass(obj, propValuePairs, 'all');\n}\nexport function anyPropertiesPass(obj, propValuePairs) {\n    return anyOrAllPropertiesPass(obj, propValuePairs, 'any');\n}\n// TODO: BREAK THIS UP. TRIED ONCE. TOO CONVOLUTED.\n/**\n * This function takes an object (e.g. { ohai: 'hello', count: 2 }) or an Element\n * (e.g. <p ohai=\"hello\" count=\"2\">i am an html element</p>).\n *\n * It also takes a string that represents a potential property or attribute on the\n * object or element (e.g. \"ohai\" or \"count\").\n *\n * Lastly, it takes a potential value for the potential property or attribute\n * (e.g. \"hello\" or 2).\n *\n * If the object/element has the string as a property or attribute and the value\n * of the property/attribute equals the expected value, it returns true. If not,\n * it returns false.\n *\n * This code is the brains behind our \"key:value\" strings found in Clarity Motion.\n * (e.g. { hidden: true, onlyIf: \"responsive:false\", animation: ...})\n *\n * @export\n * @param {*} objectOrElement\n * @param {string} propertyOrAttributeName\n * @param {(string | number | boolean | null | undefined)} expectedValue\n * @returns {boolean}\n */\nexport function doesPropertyPass(objectOrElement, propertyOrAttributeName, expectedValue) {\n    if (propertyOrAttributeName in objectOrElement) {\n        // test expected key/value as object property first because it's less complicated\n        if (expectedValue === false) {\n            return !objectOrElement[propertyOrAttributeName];\n        }\n        else {\n            return objectOrElement[propertyOrAttributeName] === expectedValue;\n        }\n    }\n    else if (objectOrElement.hasAttribute &&\n        objectOrElement.hasAttribute(propertyOrAttributeName)) {\n        // test expected key/value as if an attribute on an element\n        const propAsAttributeValue = objectOrElement.hasAttribute(propertyOrAttributeName) &&\n            objectOrElement.getAttribute(propertyOrAttributeName);\n        // sometimes attribute values can get set as string representations of\n        // falsy states (see: boolean attribute with a string \"false\" value).\n        // this catches that and less likely but still problematic misstep of\n        // hard-setting with a string of \"undefined\" or \"null\"\n        if (['null', 'false', 'undefined'].indexOf(propAsAttributeValue) > -1) {\n            switch (expectedValue) {\n                case null:\n                    return propAsAttributeValue === 'null';\n                case false:\n                    return propAsAttributeValue === 'false';\n                default:\n                    return !expectedValue;\n            }\n        }\n        else {\n            // after handling the weird edge case above, this is the more straightforward\n            // value check.\n            switch (expectedValue) {\n                case false:\n                    return !propAsAttributeValue || propAsAttributeValue === 'false';\n                case true:\n                    return propAsAttributeValue === '' || propAsAttributeValue === 'true';\n                default:\n                    return propAsAttributeValue === expectedValue.toString();\n            }\n        }\n    }\n    else {\n        // this is not an object property or an attribute on an element attribute so we need\n        // to verify if it's expected to be undefined or false. If so, the attribute not being\n        // present on the element (see: boolean attrs) meets expectations and return true.\n        return ((!objectOrElement.hasAttribute && (expectedValue === false || expectedValue === undefined)) || false);\n    }\n}\nexport function allAre(testFn, ...itemsToCheck) {\n    return itemsToCheck.map(item => testFn(item)).indexOf(false) < 0;\n}\nexport function allAreDefined(...items) {\n    const testFn = (val) => {\n        return val !== undefined;\n    };\n    return allAre(testFn, ...items);\n}\nexport function mergeObjects(...objs) {\n    const returnObj = {};\n    const clones = objs.map(o => {\n        // cloning here so we don't get messed up with object references\n        return isObject(o) ? { ...o } : {};\n    });\n    clones.forEach(srcObj => {\n        Object.keys(srcObj).forEach(prop => {\n            const propVal = srcObj[prop];\n            if (Array.isArray(propVal)) {\n                returnObj[prop] = Array.from(propVal);\n            }\n            else if (isObject(propVal)) {\n                returnObj[prop] = mergeObjects(returnObj[prop] || {}, propVal);\n            }\n            else {\n                returnObj[prop] = propVal;\n            }\n        });\n    });\n    return returnObj;\n}\n"],"names":["isNil","val","isNilOrEmpty","isEmpty","isString","is","String","isNumericString","trim","isStringOrNil","isStringAndNotNilOrEmpty","isObject","Object","isMap","Map","isObjectAndNotNilOrEmpty","hasPropertyChanged","oldVal","hasStringPropertyChanged","hasStringPropertyChangedAndNotNil","getEnumValues","enumeration","values","createId","prefix","Math","random","toString","substr","objectNaiveDeepEquals","obj1","obj2","JSON","stringify","getFromObjectPath","path","dataObj","fallback","split","reduce","res","key","cloneMap","mp","clonedMap","set","deepClone","obj","Array","isArray","mergeObjects","parse","convertAttributeStringValuesToValue","stringValue","convertStringPropValuePairsToTuple","propValString","map","str","pv","propname","propValAsString","anyOrAllPropertiesPass","propValuePairs","anyOrAll","tests","length","testResults","filter","pvArry","expectedVal","doesPropertyPass","allPropertiesPass","anyPropertiesPass","objectOrElement","propertyOrAttributeName","expectedValue","hasAttribute","undefined","propAsAttributeValue","getAttribute","indexOf","allAre","testFn","itemsToCheck","item","allAreDefined","items","objs","returnObj","o","forEach","srcObj","keys","prop","propVal","from"],"mappings":"2DAOO,SAASA,EAAMC,GAClB,OAAOA,MAAAA,EAEJ,SAASC,EAAaD,GACzB,OAAOD,EAAMC,IAAQE,EAAQF,GAE1B,SAASG,EAASH,GACrB,OAAOI,EAAGC,OAAQL,GAEf,SAASM,EAAgBN,GAC5B,OAAOG,EAASH,KAASE,EAAQF,EAAIO,UAAYP,IAASA,EAEvD,SAASQ,EAAcR,GAC1B,OAAOI,EAAGC,OAAQL,IAAQD,EAAMC,GAE7B,SAASS,EAAyBT,GACrC,OAAOG,EAASH,KAASD,EAAMC,KAASE,EAAQF,GAE7C,SAASU,EAASV,GACrB,OAAOI,EAAGO,OAAQX,GAEf,SAASY,EAAMZ,GAClB,OAAOI,EAAGS,IAAKb,GAEZ,SAASc,EAAyBd,GACrC,OAAQC,EAAaD,IAAQU,EAASV,GAEnC,SAASe,EAAmBf,EAAKgB,GACpC,OAAOhB,IAAQgB,EAGZ,SAASC,EAAyBjB,EAAKgB,GAC1C,OAAOR,EAAcR,IAAQe,EAAmBf,EAAKgB,GAGlD,SAASE,EAAkClB,EAAKgB,GACnD,OAAQf,EAAaD,IAAQe,EAAmBf,EAAKgB,GAElD,SAASG,EAAcC,GAC1B,OAAOT,OAAOU,OAAOD,GAElB,SAASE,EAASC,EAAS,KAC9B,MAAO,GAAGA,IAASC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAIrD,SAASC,EAAsBC,EAAMC,GACxC,OAAOC,KAAKC,UAAUH,KAAUE,KAAKC,UAAUF,GAE5C,SAASG,EAAkBC,EAAMC,EAASC,EAAW,MAAMF,MAC9D,OAAOA,EAAKG,MAAM,KAAKC,QAAO,CAACC,EAAKC,KAChC,IACI,MAAMxC,EAAMuC,EAAIC,GAChB,QAAQ,GACJ,KAAa,OAARxC,EACL,KAAa,IAARA,EACL,IAAa,KAARA,EACL,KAAa,IAARA,EACD,OAAOA,EACX,QACI,OAAOA,GAAOoC,GAG1B,MACI,OAAOA,KAEZD,GAGP,SAASM,EAASC,GACd,MAAMC,EAAY,IAAI9B,IACtB,IAAK,MAAO2B,EAAKxC,KAAQ0C,EACjB9B,EAAMZ,GACN2C,EAAUC,IAAIJ,EAAKC,EAASzC,IAG5B2C,EAAUC,IAAIJ,EAAKxC,GAG3B,OAAO2C,EAEJ,SAASE,EAAUC,GAGtB,QAAQ,GACJ,KAAKlC,EAAMkC,GACP,OAAOL,EAASK,GACpB,KAAKpC,EAASoC,KAASC,MAAMC,QAAQF,GACjC,OAAOG,EAAa,GAAIH,GAC5B,QACI,OAAOf,KAAKmB,MAAMnB,KAAKC,UAAUc,KAItC,SAASK,EAAoCC,GAChD,QAAQ,GACJ,IAAqB,SAAhBA,EACD,OAAO,EACX,IAAqB,UAAhBA,EACD,OAAO,EACX,IAAqB,SAAhBA,EACD,OAAO,KACX,IAAqB,cAAhBA,EACD,OACJ,KAAK9C,EAAgB8C,GACjB,OAAQA,EACZ,QAEI,OAAOA,GAQZ,SAASC,EAAmCC,GAE/C,OAAOA,EACFjB,MAAM,KACNkB,KAAIC,GAAOA,EAAInB,MAAM,OACrBkB,KAAIE,IACL,MAAOC,EAAUC,GAAmBF,EACpC,MAAO,CAACC,EAAUP,EAAoCQ,OAIvD,SAASC,EAAuBd,EAAKe,EAAgBC,GACxD,IAAKD,EACD,OAAO,EAEX,MAAME,EAAQV,EAAmCQ,GACjD,IAAKf,EACD,OAAO,EAEX,GAAIiB,EAAMC,OAAS,EACf,OAAO,EAEN,CACD,MAAMC,EAAcF,EAAMG,QAAOC,IAC7B,MAAOT,EAAUU,GAAeD,EAChC,OAAOE,EAAiBvB,EAAKY,EAAUU,MAE3C,MAAoB,QAAbN,EAAqBG,EAAYD,SAAWD,EAAMC,OAASC,EAAYD,OAAS,GAGxF,SAASM,EAAkBxB,EAAKe,GACnC,OAAOD,EAAuBd,EAAKe,EAAgB,OAEhD,SAASU,EAAkBzB,EAAKe,GACnC,OAAOD,EAAuBd,EAAKe,EAAgB,OA0BhD,SAASQ,EAAiBG,EAAiBC,EAAyBC,GACvE,GAAID,KAA2BD,EAE3B,OAAsB,IAAlBE,GACQF,EAAgBC,GAGjBD,EAAgBC,KAA6BC,EAGvD,IAAIF,EAAgBG,eACrBH,EAAgBG,aAAaF,GAmC7B,OAAUD,EAAgBG,gBAAmC,IAAlBD,QAA6CE,IAAlBF,KAAiC,EAnChD,CAEvD,MAAMG,EAAuBL,EAAgBG,aAAaF,IACtDD,EAAgBM,aAAaL,GAKjC,GAAI,CAAC,OAAQ,QAAS,aAAaM,QAAQF,IAAyB,EAChE,OAAQH,GACJ,KAAK,KACD,MAAgC,SAAzBG,EACX,KAAK,EACD,MAAgC,UAAzBA,EACX,QACI,OAAQH,OAMhB,OAAQA,GACJ,KAAK,EACD,OAAQG,GAAiD,UAAzBA,EACpC,KAAK,EACD,MAAgC,KAAzBA,GAAwD,SAAzBA,EAC1C,QACI,OAAOA,IAAyBH,EAAchD,aAW3D,SAASsD,EAAOC,KAAWC,GAC9B,OAAOA,EAAa3B,KAAI4B,GAAQF,EAAOE,KAAOJ,SAAQ,GAAS,EAE5D,SAASK,KAAiBC,GAI7B,OAAOL,GAHShF,QACG4E,IAAR5E,MAEcqF,GAEtB,SAASpC,KAAgBqC,GAC5B,MAAMC,EAAY,GAmBlB,OAlBeD,EAAK/B,KAAIiC,GAEb9E,EAAS8E,GAAK,IAAKA,GAAM,KAE7BC,SAAQC,IACX/E,OAAOgF,KAAKD,GAAQD,SAAQG,IACxB,MAAMC,EAAUH,EAAOE,GACnB7C,MAAMC,QAAQ6C,GACdN,EAAUK,GAAQ7C,MAAM+C,KAAKD,GAExBnF,EAASmF,GACdN,EAAUK,GAAQ3C,EAAasC,EAAUK,IAAS,GAAIC,GAGtDN,EAAUK,GAAQC,QAIvBN"}