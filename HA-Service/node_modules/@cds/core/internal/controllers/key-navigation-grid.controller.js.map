{"version":3,"file":"key-navigation-grid.controller.js","sources":["../../../../src/internal/controllers/key-navigation-grid.controller.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { onChildListMutation, onFirstInteraction } from '../utils/events.js';\nimport { getFlattenedDOMTree, getFlattenedFocusableItems } from '../utils/traversal.js';\nimport { contextMenuClick } from '../utils/dom.js';\nimport { validKeyNavigationCode } from '../utils/keycodes.js';\nimport { focusElement, getActiveElement, initializeKeyListItems, setActiveKeyListItem, simpleFocusable, } from '../utils/focus.js';\nimport { getNextKeyGridItem } from './key-navigation.utils.js';\n/**\n * Given a 2d array grid structure provide keyboard navigation following aria grid spec\n * https://w3c.github.io/aria-practices/#gridNav_focus\n */\nexport function keyNavigationGrid() {\n    return (target) => target.addInitializer((instance) => new KeyNavigationGridController(instance));\n}\nexport class KeyNavigationGridController {\n    constructor(host) {\n        this.host = host;\n        this.observers = [];\n        this.host.addController(this);\n    }\n    get hostGrid() {\n        return this.host.keyNavGrid ? this.host.keyNavGrid : this.host;\n    }\n    get hostRows() {\n        const rows = Array.from(this.host.rows);\n        if (this.host.columnRow) {\n            rows.unshift(this.host.columnRow);\n        }\n        return rows;\n    }\n    get hostCells() {\n        const cells = Array.from(this.host.cells);\n        if (this.host.columns) {\n            cells.unshift(...Array.from(this.host.columns));\n        }\n        return cells;\n    }\n    get activeCell() {\n        return Array.from(this.hostCells).find(i => i.tabIndex === 0);\n    }\n    async hostConnected() {\n        await this.host.updateComplete;\n        onFirstInteraction(this.host).then(() => {\n            initializeKeyListItems(this.hostCells);\n            this.hostGrid.addEventListener('mouseup', (e) => this.clickCell(e));\n            this.hostGrid.addEventListener('keydown', (e) => this.keynavCell(e));\n            this.hostGrid.addEventListener('keyup', (e) => this.updateCellActivation(e));\n        });\n        this.observers.push(onChildListMutation(this.host, () => initializeKeyListItems(this.hostCells)));\n    }\n    hostDisconnected() {\n        this.observers.forEach(o => o?.disconnect());\n    }\n    clickCell(e) {\n        if (!contextMenuClick(e)) {\n            const activeCell = e.composedPath().find(i => this.hostCells.find(c => c === i));\n            if (activeCell) {\n                this.setActiveCell(e, activeCell);\n            }\n        }\n    }\n    keynavCell(e) {\n        if (validKeyNavigationCode(e) && simpleFocusable(getActiveElement())) {\n            const { x, y } = getNextKeyGridItem(this.hostCells, this.hostRows, {\n                code: e.code,\n                ctrlKey: e.ctrlKey,\n                dir: this.host.dir,\n            });\n            const nextCell = Array.from(getFlattenedDOMTree(this.hostRows[y])).filter(c => !!this.hostCells.find(i => i === c))[x];\n            this.setActiveCell(e, nextCell);\n            e.preventDefault();\n        }\n    }\n    setActiveCell(e, activeCell) {\n        setActiveKeyListItem(this.hostCells, activeCell);\n        // https://w3c.github.io/aria-practices/#gridNav_focus\n        const items = getFlattenedFocusableItems(activeCell);\n        const simpleItems = items.filter(i => simpleFocusable(i));\n        if (simpleItems.length === 1 && items.length === 1) {\n            focusElement(simpleItems[0]);\n        }\n        else {\n            focusElement(activeCell);\n        }\n        activeCell.dispatchEvent(new CustomEvent('cdsKeyChange', {\n            bubbles: true,\n            detail: { code: e.code, shiftKey: e.shiftKey, activeItem: activeCell },\n        }));\n    }\n    updateCellActivation(e) {\n        if (e.code === 'Escape') {\n            this.activeCell?.focus();\n        }\n        if (e.code === 'Enter' && this.activeCell === e.composedPath()[0]) {\n            getFlattenedFocusableItems(this.activeCell)[0]?.focus();\n        }\n    }\n}\n"],"names":["keyNavigationGrid","target","addInitializer","instance","KeyNavigationGridController","constructor","host","this","observers","addController","hostGrid","keyNavGrid","hostRows","rows","Array","from","columnRow","unshift","hostCells","cells","columns","activeCell","find","i","tabIndex","async","updateComplete","onFirstInteraction","then","initializeKeyListItems","addEventListener","e","clickCell","keynavCell","updateCellActivation","push","onChildListMutation","hostDisconnected","forEach","o","disconnect","contextMenuClick","composedPath","c","setActiveCell","validKeyNavigationCode","simpleFocusable","getActiveElement","x","y","getNextKeyGridItem","code","ctrlKey","dir","nextCell","getFlattenedDOMTree","filter","preventDefault","setActiveKeyListItem","items","getFlattenedFocusableItems","simpleItems","length","focusElement","dispatchEvent","CustomEvent","bubbles","detail","shiftKey","activeItem","focus"],"mappings":"+eAeO,SAASA,IACZ,OAAQC,GAAWA,EAAOC,gBAAgBC,GAAa,IAAIC,EAA4BD,KAEpF,MAAMC,EACTC,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,UAAY,GACjBD,KAAKD,KAAKG,cAAcF,MAExBG,eACA,OAAOH,KAAKD,KAAKK,WAAaJ,KAAKD,KAAKK,WAAaJ,KAAKD,KAE1DM,eACA,MAAMC,EAAOC,MAAMC,KAAKR,KAAKD,KAAKO,MAIlC,OAHIN,KAAKD,KAAKU,WACVH,EAAKI,QAAQV,KAAKD,KAAKU,WAEpBH,EAEPK,gBACA,MAAMC,EAAQL,MAAMC,KAAKR,KAAKD,KAAKa,OAInC,OAHIZ,KAAKD,KAAKc,SACVD,EAAMF,WAAWH,MAAMC,KAAKR,KAAKD,KAAKc,UAEnCD,EAEPE,iBACA,OAAOP,MAAMC,KAAKR,KAAKW,WAAWI,MAAKC,GAAoB,IAAfA,EAAEC,WAElDC,4BACUlB,KAAKD,KAAKoB,eAChBC,EAAmBpB,KAAKD,MAAMsB,MAAK,KAC/BC,EAAuBtB,KAAKW,WAC5BX,KAAKG,SAASoB,iBAAiB,WAAYC,GAAMxB,KAAKyB,UAAUD,KAChExB,KAAKG,SAASoB,iBAAiB,WAAYC,GAAMxB,KAAK0B,WAAWF,KACjExB,KAAKG,SAASoB,iBAAiB,SAAUC,GAAMxB,KAAK2B,qBAAqBH,QAE7ExB,KAAKC,UAAU2B,KAAKC,EAAoB7B,KAAKD,MAAM,IAAMuB,EAAuBtB,KAAKW,cAEzFmB,mBACI9B,KAAKC,UAAU8B,SAAQC,GAAKA,GAAGC,eAEnCR,UAAUD,GACN,IAAKU,EAAiBV,GAAI,CACtB,MAAMV,EAAaU,EAAEW,eAAepB,MAAKC,GAAKhB,KAAKW,UAAUI,MAAKqB,GAAKA,IAAMpB,MACzEF,GACAd,KAAKqC,cAAcb,EAAGV,IAIlCY,WAAWF,GACP,GAAIc,EAAuBd,IAAMe,EAAgBC,KAAqB,CAClE,MAAMC,EAAEA,EAACC,EAAEA,GAAMC,EAAmB3C,KAAKW,UAAWX,KAAKK,SAAU,CAC/DuC,KAAMpB,EAAEoB,KACRC,QAASrB,EAAEqB,QACXC,IAAK9C,KAAKD,KAAK+C,MAEbC,EAAWxC,MAAMC,KAAKwC,EAAoBhD,KAAKK,SAASqC,KAAKO,QAAOb,KAAOpC,KAAKW,UAAUI,MAAKC,GAAKA,IAAMoB,MAAIK,GACpHzC,KAAKqC,cAAcb,EAAGuB,GACtBvB,EAAE0B,kBAGVb,cAAcb,EAAGV,GACbqC,EAAqBnD,KAAKW,UAAWG,GAErC,MAAMsC,EAAQC,EAA2BvC,GACnCwC,EAAcF,EAAMH,QAAOjC,GAAKuB,EAAgBvB,KAC3B,IAAvBsC,EAAYC,QAAiC,IAAjBH,EAAMG,OAClCC,EAAaF,EAAY,IAGzBE,EAAa1C,GAEjBA,EAAW2C,cAAc,IAAIC,YAAY,eAAgB,CACrDC,SAAS,EACTC,OAAQ,CAAEhB,KAAMpB,EAAEoB,KAAMiB,SAAUrC,EAAEqC,SAAUC,WAAYhD,MAGlEa,qBAAqBH,GACF,WAAXA,EAAEoB,MACF5C,KAAKc,YAAYiD,QAEN,UAAXvC,EAAEoB,MAAoB5C,KAAKc,aAAeU,EAAEW,eAAe,IAC3DkB,EAA2BrD,KAAKc,YAAY,IAAIiD"}