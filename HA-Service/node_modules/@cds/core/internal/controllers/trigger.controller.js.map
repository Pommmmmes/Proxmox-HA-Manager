{"version":3,"file":"trigger.controller.js","sources":["../../../../src/internal/controllers/trigger.controller.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { listenForAttributeChange } from '../utils/events.js';\nimport { getActiveElement } from '../utils/focus.js';\n/**\n * The TriggerController will track the last known interacted element\n * when the host component was created or shown. This is used for when a component\n * needs to know the element that \"triggered\" the interaction.\n *\n * Examples include, popover types, closable types and draggable types.\n */\nexport function triggerable(config = { focus: true }) {\n    return (target) => target.addInitializer((instance) => new TriggerController(instance, config));\n}\nexport class TriggerController {\n    constructor(host, config = { focus: true }) {\n        this.host = host;\n        this.config = config;\n        this.activeElement = getActiveElement();\n        this.host.addController(this);\n    }\n    get current() {\n        return this.host.trigger ? this._current : this.activeElement;\n    }\n    get prev() {\n        return this._prev;\n    }\n    async hostConnected() {\n        this.observer = listenForAttributeChange(this.host, 'hidden', () => {\n            const activeElement = getActiveElement();\n            if (!this.host.hidden && activeElement) {\n                this.activeElement = activeElement;\n            }\n            else {\n                this.focusCurrent();\n            }\n        });\n    }\n    hostUpdate() {\n        if (this._current !== this.host.trigger) {\n            this._prev = this._current;\n            this._current = this.host.trigger ? this.host.trigger : this.activeElement;\n        }\n    }\n    hostDisconnected() {\n        this.focusCurrent();\n        this.observer?.disconnect();\n    }\n    focusCurrent() {\n        if (this.config.focus) {\n            this.current?.focus();\n        }\n    }\n}\n"],"names":["triggerable","config","focus","target","addInitializer","instance","TriggerController","constructor","host","this","activeElement","getActiveElement","addController","current","trigger","_current","prev","_prev","async","observer","listenForAttributeChange","hidden","focusCurrent","hostUpdate","hostDisconnected","disconnect"],"mappings":"mHAcO,SAASA,EAAYC,EAAS,CAAEC,OAAO,IAC1C,OAAQC,GAAWA,EAAOC,gBAAgBC,GAAa,IAAIC,EAAkBD,EAAUJ,KAEpF,MAAMK,EACTC,YAAYC,EAAMP,EAAS,CAAEC,OAAO,IAChCO,KAAKD,KAAOA,EACZC,KAAKR,OAASA,EACdQ,KAAKC,cAAgBC,IACrBF,KAAKD,KAAKI,cAAcH,MAExBI,cACA,OAAOJ,KAAKD,KAAKM,QAAUL,KAAKM,SAAWN,KAAKC,cAEhDM,WACA,OAAOP,KAAKQ,MAEhBC,sBACIT,KAAKU,SAAWC,EAAyBX,KAAKD,KAAM,UAAU,KAC1D,MAAME,EAAgBC,KACjBF,KAAKD,KAAKa,QAAUX,EACrBD,KAAKC,cAAgBA,EAGrBD,KAAKa,kBAIjBC,aACQd,KAAKM,WAAaN,KAAKD,KAAKM,UAC5BL,KAAKQ,MAAQR,KAAKM,SAClBN,KAAKM,SAAWN,KAAKD,KAAKM,QAAUL,KAAKD,KAAKM,QAAUL,KAAKC,eAGrEc,mBACIf,KAAKa,eACLb,KAAKU,UAAUM,aAEnBH,eACQb,KAAKR,OAAOC,OACZO,KAAKI,SAASX"}