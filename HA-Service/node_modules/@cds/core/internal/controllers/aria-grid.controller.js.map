{"version":3,"file":"aria-grid.controller.js","sources":["../../../../src/internal/controllers/aria-grid.controller.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { isSafari, isWindows } from '../utils/browser.js';\nimport { onChildListMutation } from '../utils/events.js';\nimport { getFlattenedFocusableItems } from '../utils/traversal.js';\n/**\n * Provides all nessesary role/aria-* attributes to create a vaild aria grid\n * https://www.w3.org/TR/wai-aria-practices/examples/grid/dataGrids.html\n */\nexport function ariaGrid(config = { update: 'slot' }) {\n    return (target) => {\n        target.addInitializer((instance) => {\n            if (!instance.ariaGridController) {\n                instance.ariaGridController = new AriaGridController(instance, config);\n            }\n        });\n    };\n}\nexport class AriaGridController {\n    constructor(host, config = { update: 'slot' }) {\n        this.host = host;\n        this.config = config;\n        this.observers = [];\n        host.addController(this);\n    }\n    async hostConnected() {\n        await this.host.updateComplete;\n        this.intializeColumnSort();\n        this.update();\n        if (this.config.update === 'slot') {\n            this.host.shadowRoot.addEventListener('slotchange', () => this.host.updateComplete.then(() => this.update()));\n        }\n        else {\n            this.observers.push(onChildListMutation(this.host, () => this.host.updateComplete.then(() => this.update())));\n        }\n    }\n    hostDisconnected() {\n        this.observers.forEach(o => o?.disconnect());\n    }\n    update() {\n        // create one copy per update to prevent multiple DOM queries from @query getters\n        this.grid = {\n            grid: this.host.grid ? this.host.grid : this.host,\n            columnRowGroup: this.host.columnRowGroup,\n            columnRow: this.host.columnRow,\n            columns: this.host.columns,\n            rowGroup: this.host.rowGroup,\n            rows: this.host.rows,\n            cells: this.host.cells,\n            footerRowGroup: this.host.footerRowGroup,\n            footerRow: this.host.footerRow,\n            footerCells: this.host.footerCells,\n            placeholderCell: this.host.placeholderCell,\n        };\n        this.initializeGrid();\n        this.intializeColumns();\n        this.initializeRows();\n        this.initializeCells();\n        this.initializePlaceholder();\n        this.intializeFooter();\n    }\n    intializeColumnSort() {\n        this.host.addEventListener('sortChange', (e) => {\n            const col = e.composedPath().find((i) => i.role === 'columnheader');\n            if (col) {\n                col.ariaSort = e.detail;\n            }\n        });\n    }\n    initializeGrid() {\n        const columnRowCount = 1;\n        const rowCountOrDefault = Math.max(this.grid.rows?.length, 1);\n        const footerRowCountOrDefault = this.grid.footerRow ? 1 : 0;\n        this.grid.grid.role = 'grid';\n        this.grid.grid.ariaRowCount = `${columnRowCount + rowCountOrDefault + footerRowCountOrDefault}`;\n        this.grid.grid.ariaColCount = `${this.grid.columns.length}`;\n    }\n    intializeColumns() {\n        this.grid.columnRowGroup.role = 'rowgroup';\n        this.grid.columnRow.role = 'row';\n        this.grid.columnRow.ariaRowIndex = '1';\n        this.grid.columns.forEach((c, i) => {\n            c.role = 'columnheader';\n            c.ariaColIndex = `${i + 1}`;\n            c.ariaSort = 'none';\n            this.patchInvalidScreenReaderBehavior(c);\n        });\n    }\n    initializeRows() {\n        this.grid.rows?.forEach((r, i) => {\n            r.role = 'row';\n            r.ariaRowIndex = `${i + 2}`; // +2 for column header row offset\n        });\n    }\n    /**\n     * If cell has focusable items NVDA will go into forms mode (expected behavior)\n     * Use table navigation ctrl+alt+arrow to move in and out of cells\n     * https://github.com/nvaccess/nvda/issues/7718\n     */\n    initializeCells() {\n        const colsCount = this.grid.columns.length;\n        this.grid.cells?.forEach((c, i) => {\n            if (!c.role) {\n                c.role = 'gridcell';\n            }\n            c.ariaColIndex = `${(i % colsCount) + 1}`; // colindex starts at 1\n        });\n    }\n    initializePlaceholder() {\n        if (this.grid.placeholderCell) {\n            this.grid.placeholderCell.ariaColSpan = this.grid.grid.ariaColCount;\n        }\n    }\n    intializeFooter() {\n        if (this.grid.footerRowGroup && this.grid.footerRow) {\n            this.grid.footerRowGroup.role = 'rowgroup';\n            this.grid.footerRow.role = 'row';\n            this.grid.footerRow.ariaRowIndex = `${this.grid.rows.length + 2}`; // offset for header row\n            this.grid.footerCells?.forEach(c => (c.role = 'gridcell'));\n            if (this.grid.footerCells?.length === 1) {\n                this.grid.footerCells[0].ariaColSpan = this.grid.grid.ariaColCount;\n            }\n        }\n    }\n    /**\n     * Only visible columnheader text should be read to SRs but Safari/VO and NVDA violates the spec\n     * and deep merges any labeled content within the header even if hidden or interactive.\n     * This will apply a patch to force Safari and NVDA to read only the provided aria-label\n     *\n     * https://github.com/nvaccess/nvda/issues/10096\n     * https://github.com/nvaccess/nvda/issues/9017\n     * https://github.com/nvaccess/nvda/pull/12763\n     * https://github.com/nvaccess/nvda/issues/12392\n     * https://github.com/nvaccess/nvda/issues/6826\n     * https://github.com/nvaccess/nvda/issues/11181\n     */\n    patchInvalidScreenReaderBehavior(c) {\n        if (isSafari() || isWindows()) {\n            const fousableItems = getFlattenedFocusableItems(c).filter((c) => !c.readonly);\n            const label = c.ariaLabel ? c.ariaLabel : c?.textContent?.trim();\n            // todo: generic catch for resizable component\n            if ((fousableItems.length || c.resizable) && label.length) {\n                c.ariaLabel = label;\n                c.setAttribute('scope', 'col');\n            }\n        }\n    }\n}\n"],"names":["ariaGrid","config","update","target","addInitializer","instance","ariaGridController","AriaGridController","constructor","host","this","observers","addController","async","updateComplete","intializeColumnSort","shadowRoot","addEventListener","then","push","onChildListMutation","hostDisconnected","forEach","o","disconnect","grid","columnRowGroup","columnRow","columns","rowGroup","rows","cells","footerRowGroup","footerRow","footerCells","placeholderCell","initializeGrid","intializeColumns","initializeRows","initializeCells","initializePlaceholder","intializeFooter","e","col","composedPath","find","i","role","ariaSort","detail","rowCountOrDefault","Math","max","length","footerRowCountOrDefault","ariaRowCount","ariaColCount","ariaRowIndex","c","ariaColIndex","patchInvalidScreenReaderBehavior","r","colsCount","ariaColSpan","isSafari","isWindows","fousableItems","getFlattenedFocusableItems","filter","readonly","label","ariaLabel","textContent","trim","resizable","setAttribute"],"mappings":"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"}