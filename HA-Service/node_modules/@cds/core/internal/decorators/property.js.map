{"version":3,"file":"property.js","sources":["../../../../src/internal/decorators/property.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { property as _property } from 'lit/decorators/property.js';\nimport { camelCaseToKebabCase, kebabCaseToPascalCase, capitalizeFirstLetter } from '../utils/string.js';\nimport { LogService } from '../services/log.service.js';\nimport { getAngularVersion, getReactVersion, getVueVersion } from '../utils/framework.js';\nimport { isNilOrEmpty } from '../utils/identity.js';\nimport { coerceBooleanProperty } from '../utils/dom.js';\n/**\n * https://developers.google.com/web/fundamentals/web-components/best-practices\n */\nexport function getDefaultOptions(propertyKey, options) {\n    const type = options ? options.type : options;\n    switch (type) {\n        case Array:\n            return { reflect: false, ...options };\n        case Object:\n            return { reflect: false, ...options };\n        case String:\n            return {\n                reflect: true,\n                attribute: camelCaseToKebabCase(propertyKey),\n                converter: {\n                    toAttribute: (value) => (value ? value : null),\n                },\n                ...options,\n            };\n        case Number:\n            return { reflect: true, attribute: camelCaseToKebabCase(propertyKey), ...options };\n        case Boolean:\n            return {\n                reflect: true,\n                attribute: camelCaseToKebabCase(propertyKey),\n                converter: {\n                    // Mimic standard HTML boolean attributes + support \"false\" attribute values\n                    // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes\n                    toAttribute: (value) => (value ? '' : null),\n                    fromAttribute: (value) => coerceBooleanProperty(value),\n                },\n                ...options,\n            };\n        case Date: {\n            return {\n                // Parse date strings from attributes but do not reflect back into attribute\n                reflect: false,\n                converter: {\n                    fromAttribute: (value) => new Date(value),\n                },\n                ...options,\n            };\n        }\n        default:\n            return { ...options };\n    }\n}\nexport function requirePropertyCheck(protoOrDescriptor, name, options) {\n    const targetFirstUpdated = protoOrDescriptor.firstUpdated;\n    function firstUpdated(props) {\n        if (options && options.required && isNilOrEmpty(this[name])) {\n            const message = options.requiredMessage || getRequiredMessage(options.required, name, this.tagName);\n            if (options.required === 'error') {\n                throw new Error(message);\n            }\n            else {\n                LogService.warn(message, this);\n            }\n        }\n        if (targetFirstUpdated) {\n            targetFirstUpdated.apply(this, [props]);\n        }\n    }\n    protoOrDescriptor.firstUpdated = firstUpdated;\n}\n/**\n * In React, DOM attributes and properties are camelCase, except for aria- and data- attributes\n * https://reactjs.org/docs/dom-elements.html\n *\n * This will format aria attributes as kebab case, otherwise returning the original property name\n */\nfunction getReactPropertyName(propertyName) {\n    if (propertyName.startsWith('aria')) {\n        return camelCaseToKebabCase(propertyName);\n    }\n    return propertyName;\n}\nfunction getRequiredMessage(level = 'warning', propertyName, tagName) {\n    const tag = tagName.toLocaleLowerCase();\n    return (`${capitalizeFirstLetter(level)}: ${propertyName} is required to use ${tag} component. Set the JS Property or HTML Attribute.\\n\\n` +\n        `${getAngularVersion() ? `Angular: <${tag} [${propertyName}]=\"...\"></${tag}>\\n` : ''}` +\n        `${getVueVersion() ? `Vue: <${tag} :${propertyName}=\"...\"></${tag}>\\n` : ''}` +\n        `${getReactVersion() ? `React: <${kebabCaseToPascalCase(tag)} ${getReactPropertyName(propertyName)}={...} />\\n` : ''}` +\n        `${`HTML: <${tag} ${camelCaseToKebabCase(propertyName)}=\"...\"></${tag}>\\n`}` +\n        `${`JavaScript: document.querySelector('${tag}').${propertyName} = '...';\\n\\n`}`);\n}\n/**\n * lit @property decorator with custom defaults specific to Clarity.\n * https://lit.dev/docs/components/properties/\n *\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A PropertyDeclaration may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    return (protoOrDescriptor, name) => {\n        if (options?.required) {\n            requirePropertyCheck(protoOrDescriptor, name, options);\n        }\n        return _property(getDefaultOptions(name, options))(protoOrDescriptor, name);\n    };\n}\n/**\n * lit @state decorator with custom defaults specific to Clarity.\n *\n * This is used for communication between internal component properties\n * that are not exposed as part of the public component API.\n * https://lit.dev/docs/api/decorators/#state\n *\n * @ExportDecoratedItems\n */\nexport function state(options) {\n    return (protoOrDescriptor, name) => {\n        const defaultOptions = getDefaultOptions(name, options);\n        if (defaultOptions) {\n            defaultOptions.reflect = options?.reflect ? options.reflect : false; // prevent attr reflection by default\n            if (defaultOptions.reflect && !options?.attribute) {\n                // mark as internal attr if reflect and no provided attr\n                // see description for more detail https://github.com/vmware/clarity/pull/5431\n                defaultOptions.attribute = `_${camelCaseToKebabCase(name)}`;\n            }\n        }\n        return _property(defaultOptions)(protoOrDescriptor, name);\n    };\n}\n"],"names":["getDefaultOptions","propertyKey","options","type","Array","Object","reflect","String","attribute","camelCaseToKebabCase","converter","toAttribute","value","Number","Boolean","fromAttribute","coerceBooleanProperty","Date","requirePropertyCheck","protoOrDescriptor","name","targetFirstUpdated","firstUpdated","props","required","isNilOrEmpty","this","message","requiredMessage","level","propertyName","tagName","tag","toLocaleLowerCase","capitalizeFirstLetter","getAngularVersion","getVueVersion","getReactVersion","kebabCaseToPascalCase","startsWith","getReactPropertyName","getRequiredMessage","Error","LogService","warn","apply","property","_property","state","defaultOptions"],"mappings":"4aAcO,SAASA,EAAkBC,EAAaC,GAE3C,OADaA,EAAUA,EAAQC,KAAOD,GAElC,KAAKE,MAEL,KAAKC,OACD,MAAO,CAAEC,SAAS,KAAUJ,GAChC,KAAKK,OACD,MAAO,CACHD,SAAS,EACTE,UAAWC,EAAqBR,GAChCS,UAAW,CACPC,YAAcC,GAAWA,GAAgB,SAE1CV,GAEX,KAAKW,OACD,MAAO,CAAEP,SAAS,EAAME,UAAWC,EAAqBR,MAAiBC,GAC7E,KAAKY,QACD,MAAO,CACHR,SAAS,EACTE,UAAWC,EAAqBR,GAChCS,UAAW,CAGPC,YAAcC,GAAWA,EAAQ,GAAK,KACtCG,cAAgBH,GAAUI,EAAsBJ,OAEjDV,GAEX,KAAKe,KACD,MAAO,CAEHX,SAAS,EACTI,UAAW,CACPK,cAAgBH,GAAU,IAAIK,KAAKL,OAEpCV,GAGX,QACI,MAAO,IAAKA,IAGjB,SAASgB,EAAqBC,EAAmBC,EAAMlB,GAC1D,MAAMmB,EAAqBF,EAAkBG,aAe7CH,EAAkBG,aAdlB,SAAsBC,GAClB,GAAIrB,GAAWA,EAAQsB,UAAYC,EAAaC,KAAKN,IAAQ,CACzD,MAAMO,EAAUzB,EAAQ0B,iBA0BpC,SAA4BC,EAAQ,UAAWC,EAAcC,GACzD,MAAMC,EAAMD,EAAQE,oBACpB,MAAQ,GAAGC,EAAsBL,OAAWC,wBAAmCE,2DACxEG,IAAsB,aAAaH,MAAQF,cAAyBE,OAAW,KAC/EI,IAAkB,SAASJ,MAAQF,aAAwBE,OAAW,KACtEK,IAAoB,WAAWC,EAAsBN,MAXhE,SAA8BF,GAC1B,OAAIA,EAAaS,WAAW,QACjB9B,EAAqBqB,GAEzBA,EAO6DU,CAAqBV,gBAA6B,IAClH,UAAaE,KAAOvB,EAAqBqB,cAAyBE,OAClE,uCAA0CA,OAASF,iBAjCJW,CAAmBvC,EAAQsB,SAAUJ,EAAMM,KAAKK,SAC3F,GAAyB,UAArB7B,EAAQsB,SACR,MAAUkB,MAAMf,GAGhBgB,EAAWC,KAAKjB,EAASD,MAG7BL,GACAA,EAAmBwB,KAAMnB,KAAOH,IAoCrC,SAASuB,EAAS5C,GACrB,MAAO,CAACiB,EAAmBC,KACnBlB,GAASsB,UACTN,EAAqBC,EAAmBC,EAAMlB,GAE3C6C,EAAU/C,EAAkBoB,EAAMlB,GAAlC6C,CAA4C5B,EAAmBC,IAYvE,SAAS4B,EAAM9C,GAClB,MAAO,CAACiB,EAAmBC,KACvB,MAAM6B,EAAiBjD,EAAkBoB,EAAMlB,GAS/C,OARI+C,IACAA,EAAe3C,UAAUJ,GAASI,SAAUJ,EAAQI,QAChD2C,EAAe3C,UAAYJ,GAASM,YAGpCyC,EAAezC,UAAY,IAAIC,EAAqBW,KAGrD2B,EAAUE,EAAVF,CAA0B5B,EAAmBC"}