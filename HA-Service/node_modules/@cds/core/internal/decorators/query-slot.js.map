{"version":3,"file":"query-slot.js","sources":["../../../../src/internal/decorators/query-slot.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { LogService, notProductionEnvironment } from '../services/log.service.js';\n// Slot Query decorators are similar to the query decorator in lit.\n// Instead of querying the component template they query the content slot of the component.\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\nexport function querySlot(selector, config) {\n    return (protoOrDescriptor, name) => {\n        const targetFirstUpdated = protoOrDescriptor.firstUpdated;\n        function firstUpdated() {\n            const ref = this.querySelector(selector);\n            const shouldExempt = config?.exemptOn && config?.exemptOn(this);\n            if (!ref && notProductionEnvironment() && config?.required && !shouldExempt) {\n                const message = config.requiredMessage ||\n                    `The <${selector}> element is required to use <${this.tagName.toLocaleLowerCase()}>`;\n                if (config.required === 'error') {\n                    throw new Error(message);\n                }\n                else {\n                    LogService.warn(message, this);\n                }\n            }\n            if (config?.assign && ref?.hasAttribute('slot') === false) {\n                ref.setAttribute('slot', config.assign);\n            }\n            if (targetFirstUpdated) {\n                targetFirstUpdated.apply(this);\n            }\n        }\n        protoOrDescriptor.firstUpdated = firstUpdated;\n        const descriptor = {\n            get() {\n                return this.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return name !== undefined\n            ? legacyQuery(descriptor, protoOrDescriptor, name)\n            : standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\nexport function querySlotAll(selector, config) {\n    return (protoOrDescriptor, name) => {\n        const targetFirstUpdated = protoOrDescriptor.firstUpdated;\n        function firstUpdated(props) {\n            if (config?.assign) {\n                Array.from(this.querySelectorAll(selector))\n                    .filter((i) => !i.hasAttribute('slot'))\n                    .forEach((i) => i.setAttribute('slot', config.assign));\n            }\n            if (targetFirstUpdated) {\n                targetFirstUpdated.apply(this, [props]);\n            }\n        }\n        protoOrDescriptor.firstUpdated = firstUpdated;\n        const descriptor = {\n            get() {\n                return this.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return name !== undefined\n            ? legacyQuery(descriptor, protoOrDescriptor, name)\n            : standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n"],"names":["legacyQuery","descriptor","proto","name","Object","defineProperty","standardQuery","element","kind","placement","key","querySlot","selector","config","protoOrDescriptor","targetFirstUpdated","firstUpdated","ref","this","querySelector","shouldExempt","exemptOn","notProductionEnvironment","required","message","requiredMessage","tagName","toLocaleLowerCase","Error","LogService","warn","assign","hasAttribute","setAttribute","apply","get","enumerable","configurable","undefined","querySlotAll","props","Array","from","querySelectorAll","filter","i","forEach"],"mappings":"sFAQA,MAAMA,EAAc,CAACC,EAAYC,EAAOC,KACpCC,OAAOC,eAAeH,EAAOC,EAAMF,IAEjCK,EAAgB,CAACL,EAAYM,MAC/BC,KAAM,SACNC,UAAW,YACXC,IAAKH,EAAQG,IACbT,WAAAA,IAQG,SAASU,EAAUC,EAAUC,GAChC,MAAO,CAACC,EAAmBX,KACvB,MAAMY,EAAqBD,EAAkBE,aAqB7CF,EAAkBE,aApBlB,WACI,MAAMC,EAAMC,KAAKC,cAAcP,GACzBQ,EAAeP,GAAQQ,UAAYR,GAAQQ,SAASH,MAC1D,IAAKD,GAAOK,KAA8BT,GAAQU,WAAaH,EAAc,CACzE,MAAMI,EAAUX,EAAOY,iBACnB,QAAQb,kCAAyCM,KAAKQ,QAAQC,uBAClE,GAAwB,UAApBd,EAAOU,SACP,MAAUK,MAAMJ,GAGhBK,EAAWC,KAAKN,EAASN,MAG7BL,GAAQkB,SAAwC,IAA9Bd,GAAKe,aAAa,SACpCf,EAAIgB,aAAa,OAAQpB,EAAOkB,QAEhChB,GACAA,EAAmBmB,MAAMhB,OAIjC,MAAMjB,EAAa,CACfkC,MACI,OAAOjB,KAAKC,cAAcP,IAE9BwB,YAAY,EACZC,cAAc,GAElB,YAAgBC,IAATnC,EACDH,EAAYC,EAAYa,EAAmBX,GAC3CG,EAAcL,EAAYa,IASjC,SAASyB,EAAa3B,EAAUC,GACnC,MAAO,CAACC,EAAmBX,KACvB,MAAMY,EAAqBD,EAAkBE,aAW7CF,EAAkBE,aAVlB,SAAsBwB,GACd3B,GAAQkB,QACRU,MAAMC,KAAKxB,KAAKyB,iBAAiB/B,IAC5BgC,QAAQC,IAAOA,EAAEb,aAAa,UAC9Bc,SAASD,GAAMA,EAAEZ,aAAa,OAAQpB,EAAOkB,UAElDhB,GACAA,EAAmBmB,KAAMhB,KAAOsB,IAIxC,MAAMvC,EAAa,CACfkC,MACI,OAAOjB,KAAKyB,iBAAiB/B,IAEjCwB,YAAY,EACZC,cAAc,GAElB,YAAgBC,IAATnC,EACDH,EAAYC,EAAYa,EAAmBX,GAC3CG,EAAcL,EAAYa"}