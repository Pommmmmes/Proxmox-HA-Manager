{"version":3,"file":"utils.js","sources":["../../../../src/internal/motion/utils.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { AnimationStatus, CLARITY_MOTION_ENTER_LEAVE_PROPERTY, CLARITY_MOTION_FALLBACK_DURATION_IN_MS, CLARITY_MOTION_FALLBACK_EASING, CLARITY_MOTION_REVERSE_ANIMATION_LABEL, CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX, } from './interfaces.js';\nimport { LogService } from '../services/log.service.js';\nimport { ClarityMotion } from './motion.service.js';\nimport clone from 'ramda/es/clone';\nimport { getCssPropertyValue, isCssPropertyName } from '../utils/css.js';\nimport { isPrefixedBy, isSuffixedBy, getNumericValueFromCssSecondsStyleValue, removePrefix } from '../utils/string.js';\nimport { queryChildFromLightOrShadowDom } from '../utils/dom.js';\nimport { allPropertiesPass } from '../utils/identity.js';\nimport { getMillisecondsFromSeconds } from '../utils/math.js';\n/**\n * runPropertyAnimations() is a utility function called by the @animate(). It is a single point of entry\n * to execute the property-driven animations found in components like the accordion and overlay.\n *\n * Other utilities here are exported to break up the unit tests covering the animation/motion\n * library. While they could be called or used in isolation, it is not recommended for most use cases.\n *\n * runPropertyAnimations returns a boolean so that we know if it ran successfully or not. This is\n * mostly to make testing the function easier.\n *\n * @internal\n */\n/* c8 ignore next */\nexport async function runPropertyAnimations(props, hostEl) {\n    if (!hostEl._animations) {\n        LogService.warn(`${hostEl.tagName.toLocaleLowerCase()} is trying to animate but no animations are defined.`);\n        return false;\n    }\n    // this runs through animations for each property sequentially\n    // animations passed into getPropertyAnimations are the Property-Driven Animations\n    // passed into the @animate decorator\n    // { hidden: { true: 'cds-modal-enter-reverse', false: 'enter' }, status: { error: 'cds-component-shake' } }\n    // getPropertyAnimations transforms the @animate decorator config into an array of\n    // tuples so they are easier to work with.\n    // ['hidden', { true: 'cds-modal-enter-reverse', false: 'enter' }], ['status', { error: 'cds-component-shake' }]\n    // * inactive animations are filtered out\n    const propertyAnimations = getPropertyAnimations(hostEl._animations, props);\n    const animationsRan = await Promise.all(propertyAnimations.map((propNameAnimationTuple) => {\n        const [propname, propertyAnimationsByValue] = propNameAnimationTuple;\n        if (props.get(propname) === hostEl[propname]) {\n            // a weird/unlikely state where an update is sent but the property value didn't actually change\n            return false;\n        }\n        // gets animations to run based on the property's value\n        const animatedPropertyValueAsString = propertyAnimationsByValue[hostEl[propname].toString()];\n        const cdsMotionValue = hostEl.cdsMotion;\n        // looping through each tuple value in order, getAnimationConfigForPropertyValue()\n        // returns a tuple with the animation name from Clarity Motion and the TargetedAnimation\n        // config (also returned from the Clarity Motion service)\n        // ['enter-reverse', [ { target: '.private-host', animation: [ { opacity: 0 }, { opacity: 1 } ], options: { duration: 300 }}]\n        const [motionName, returnedMotion] = getAnimationConfigForPropertyValue(animatedPropertyValueAsString, getInlineOverride(cdsMotionValue, propname, hostEl[propname].toString()));\n        let motionForMyValue = clone(returnedMotion); // have to jump through this hoop to keep typescript happy\n        // jumps out if there are no animation routines\n        if (motionForMyValue.length < 1) {\n            return false;\n        }\n        motionForMyValue = setAnimationConfigOptions(motionName, motionForMyValue, hostEl);\n        // loops through animation config and runs them; assigns the promises to an array we can Promise.all() at the end\n        const animations = getAnimationPromiseInstructions(animatedPropertyValueAsString, motionForMyValue, hostEl);\n        return Promise.all(animations).then(() => {\n            resolveAnimationEndStatus(animatedPropertyValueAsString, hostEl);\n            return true;\n        });\n    }))\n        .then(result => {\n        return result.indexOf(true) > -1;\n    })\n        .catch(() => {\n        return false;\n    });\n    return animationsRan;\n}\n// --- CONTROL FLOW UTILS ---\n/* c8 ignore next */\nexport function setAnimationStartStatus(animatedPropertyValueAsString, hostEl) {\n    // accesses and manipulates the private animation status attr;\n    if (hostEl.getAttribute('_cds-animation-status') !== AnimationStatus.active) {\n        hostEl.setAttribute('_cds-animation-status', AnimationStatus.active);\n        // this is here so we only emit the start event once, right when the whole animation starts...\n        hostEl.cdsMotionChange.emit(`${animatedPropertyValueAsString} animation ${AnimationStatus.start}`);\n    }\n}\n/* c8 ignore next */\nexport function resolveAnimationEndStatus(animatedPropertyValueAsString, hostEl) {\n    // sets super secret animation attr back to 'ready'\n    hostEl.setAttribute('_cds-animation-status', AnimationStatus.ready); // A\n    // emits the name of the animation and that it ended\n    hostEl.cdsMotionChange.emit(`${animatedPropertyValueAsString} animation ${AnimationStatus.end}`); // A\n}\n/* c8 ignore next */\nexport function setAnimationConfigOptions(motionName, motionForMyValue, hostEl) {\n    const cdsMotionValue = hostEl.cdsMotion;\n    const animationsAreTurnedOff = !cdsMotionValue || cdsMotionValue === 'off';\n    // the following set of functions – reverseAnimationConfig(), zeroOutAnimationConfig(),\n    // setAnimationDuration(), setAnimationEasing() – modify the \"options\" portion of the animation routine\n    // in the tuple above that is returned from getAnimationConfigForPropertyValue\n    if (animationIsReversed(motionName)) {\n        motionForMyValue = reverseAnimationConfig(motionForMyValue);\n    }\n    if (animationsAreTurnedOff) {\n        // cdsMotion is turned off, so zero out the duration\n        motionForMyValue = zeroOutAnimationConfig(motionForMyValue);\n    }\n    else {\n        // sets duration and easing based on CSS properties, passed values, or a global fallback\n        motionForMyValue = setAnimationDuration(motionForMyValue, hostEl);\n        motionForMyValue = setAnimationEasing(motionForMyValue, hostEl);\n    }\n    return motionForMyValue;\n}\n/* c8 ignore next */\nexport function getAnimationPromiseInstructions(animatedPropertyValueAsString, motionConfigs, hostEl) {\n    return motionConfigs\n        .filter(config => !config.onlyIf || allPropertiesPass(hostEl, config.onlyIf))\n        .map(config => {\n        setAnimationStartStatus(animatedPropertyValueAsString, hostEl);\n        return new Promise(resolve => {\n            const animationPlayer = getAnimationTarget(hostEl, config.target).animate(getAnimationKeyframesOrPropertyIndexedFrames(config.animation, hostEl), config.options || {});\n            const listener = () => {\n                resolve('animation finished');\n                animationPlayer.removeEventListener('finish', listener);\n            };\n            animationPlayer.addEventListener('finish', listener);\n        });\n    });\n}\n/* c8 ignore next */\nexport function getAnimationTarget(hostEl, targetSelector) {\n    return queryChildFromLightOrShadowDom(hostEl, targetSelector) || hostEl;\n}\n/* c8 ignore next */\nexport function getAnimationKeyframesOrPropertyIndexedFrames(animationConfig, hostEl) {\n    return !Array.isArray(animationConfig) ? animationConfig : sizeDimensionKeyframes(animationConfig, hostEl);\n}\n// --- REVERSING UTILS ---\n// string -> boolean\n/* c8 ignore next */\nexport function animationIsReversed(nameOfAnimation) {\n    return isSuffixedBy(nameOfAnimation, CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX);\n}\n// { target: '.my-selector', animation: [<keyframes>], options: { duration: 500 }} ->\n// { target: '.my-selector', animation: [<keyframes>], options: { duration: 500, direction: 'reverse' }}\n/* c8 ignore next */\nexport function reverseAnimationConfig(config) {\n    return config.map((anim) => {\n        if (anim.options) {\n            anim.options.direction = CLARITY_MOTION_REVERSE_ANIMATION_LABEL;\n        }\n        else {\n            anim.options = { direction: CLARITY_MOTION_REVERSE_ANIMATION_LABEL };\n        }\n        return anim;\n    });\n}\n// 'my-animation' -> 'my-animation-reverse'\n/* c8 ignore next */\nexport function reverseAnimation(animationName) {\n    return [animationName, '-', CLARITY_MOTION_REVERSE_ANIMATION_LABEL].join('');\n}\n// --- ANIMATION CONFIG RETRIEVAL ---\n// returns an animation name from a stringified @animate decorator config passed into the\n// cds-motion attr. looks it up by property first and value second. returns empty string\n// if no animation name matches the property and property value.\n/* c8 ignore next */\nexport function getInlineOverride(cdsMotionValue, propName, propValue) {\n    if (!cdsMotionValue || !propName || typeof propValue === 'undefined') {\n        return '';\n    }\n    if (cdsMotionValue === 'on' || cdsMotionValue === 'off') {\n        return '';\n    }\n    let inlineOverride;\n    try {\n        inlineOverride = JSON.parse(cdsMotionValue);\n    }\n    catch (e) {\n        return '';\n    }\n    const overrideValue = inlineOverride[propName] && inlineOverride[propName][propValue];\n    return overrideValue ? overrideValue : '';\n}\n// 'i-am-reverse' -> 'i-am'\n/* c8 ignore next */\nexport function extractAnimationNameIfReversed(name) {\n    return animationIsReversed(name) ? name.slice(0, -1 * CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX.length) : name;\n}\n// if the name retrieved from the cds-motion config is present in Clarity Motion, it is returned\n/* c8 ignore next */\nexport function getAnimationFromOverrideOrDecorator(decoratorValue, overrideValue) {\n    if (!overrideValue) {\n        return decoratorValue;\n    }\n    return ClarityMotion.has(extractAnimationNameIfReversed(overrideValue)) ? overrideValue : decoratorValue;\n}\n// ('animation-name') -> ['animation-name', [ { target: '.an-element', animation: [<keyframes>], options: { ... }}]];\n// ('animation-name', 'name-retrieved-from-cds-motion-config') ->\n// ['name-retrieved-from-cds-motion-config', [ { target: ..., animation: [<keyframes>], options: { ... }}]];0\n/* c8 ignore next */\nexport function getAnimationConfigForPropertyValue(nameOfAnimationFromObject, cdsMotionOverride) {\n    const nameOfAnimation = getAnimationFromOverrideOrDecorator(nameOfAnimationFromObject, cdsMotionOverride);\n    return [nameOfAnimation, clone(ClarityMotion.get(extractAnimationNameIfReversed(nameOfAnimation)))];\n}\n// --- SETTING ANIMATION CONFIG VALUES ---\n/* c8 ignore next */\nexport function setAnimationDuration(config, hostEl) {\n    return setAnimationProperty('duration', hostEl, config, CLARITY_MOTION_FALLBACK_DURATION_IN_MS, (val) => {\n        return getMillisecondsFromSeconds(getNumericValueFromCssSecondsStyleValue(val));\n    });\n}\n/* c8 ignore next */\nexport function setAnimationEasing(config, hostEl) {\n    /* c8 ignore next */\n    return setAnimationProperty('easing', hostEl, config, CLARITY_MOTION_FALLBACK_EASING);\n}\n/* c8 ignore next */\nexport function zeroOutAnimationConfig(config) {\n    /* c8 ignore next */\n    return config.map(anim => {\n        if (anim.options) {\n            anim.options.duration = 0;\n            anim.options.easing = CLARITY_MOTION_FALLBACK_EASING;\n        }\n        else {\n            anim.options = { duration: 0, easing: CLARITY_MOTION_FALLBACK_EASING };\n        }\n        return anim;\n    });\n}\n/* c8 ignore next */\nexport function setAnimationProperty(propertyName, hostEl, config, staticFallback, valueConverter) {\n    return config.map((anim) => {\n        if (anim.options) {\n            if (!anim.options[propertyName]) {\n                anim.options[propertyName] = staticFallback;\n            }\n            else if (isCssPropertyName(anim.options[propertyName])) {\n                const myConfigOption = anim.options[propertyName];\n                let valFromProperty = getCssPropertyValue(myConfigOption, hostEl);\n                if (!valFromProperty) {\n                    valFromProperty = staticFallback;\n                }\n                else if (valueConverter) {\n                    valFromProperty = valueConverter(valFromProperty);\n                }\n                anim.options[propertyName] = valFromProperty;\n            }\n            // else fallthrough not required because option is already set to intended value\n        }\n        else {\n            const newConfigOptions = {};\n            newConfigOptions[propertyName] = staticFallback;\n            anim.options = newConfigOptions;\n        }\n        return anim;\n    });\n}\n// -- TRANSFORM PROPERTY-DRIVEN ANIMATION OBJECTS TO ANIMATION CONFIG OBJECTS ---\n/* c8 ignore next */\nexport function sizeDimensionKeyframes(animationKeyframes, hostEl) {\n    if (!Array.isArray(animationKeyframes)) {\n        return animationKeyframes;\n    }\n    return animationKeyframes.map((kf) => {\n        if (Object.prototype.hasOwnProperty.call(kf, 'height') && isPrefixedBy(kf?.height?.toString() || '', 'from:')) {\n            const selector = removePrefix(kf?.height?.toString() || '', 'from:');\n            const measureTarget = queryChildFromLightOrShadowDom(hostEl, selector) || null;\n            kf.height = !measureTarget ? 'auto' : measureTarget.getBoundingClientRect().height + 'px';\n        }\n        if (Object.prototype.hasOwnProperty.call(kf, 'width') && isPrefixedBy(kf?.width?.toString() || '', 'from:')) {\n            const selector = removePrefix(kf?.width?.toString() || '', 'from:');\n            const measureTarget = queryChildFromLightOrShadowDom(hostEl, selector) || null;\n            kf.width = !measureTarget ? 'auto' : measureTarget.getBoundingClientRect().width + 'px';\n        }\n        return kf;\n    });\n}\n/* c8 ignore next */\nexport function filterAnimationsByUpdatedProperties(animations, updatingProps) {\n    if (animations === null || animations === undefined) {\n        return null;\n    }\n    let objectIsEmpty = true;\n    const returnObject = {};\n    Object.getOwnPropertyNames(animations).forEach((prop) => {\n        // test here against undefined value because Lit is running initializations\n        // with properties with an \"undefined\" value. as a result of this change,\n        // animations should only run on explicitly set values...\n        if (updatingProps.has(prop) && updatingProps.get(prop) !== undefined) {\n            returnObject[prop] = clone(animations[prop]);\n            objectIsEmpty = false;\n        }\n    });\n    return objectIsEmpty ? null : returnObject;\n}\n/* c8 ignore next */\nexport function flattenAndSortAnimations(hiddenAndNotAnimationTuple, isHiding) {\n    if (hiddenAndNotAnimationTuple === null || hiddenAndNotAnimationTuple === undefined) {\n        return [];\n    }\n    const [hiddenAnimations, otherAnimations] = hiddenAndNotAnimationTuple;\n    if (hiddenAnimations.length > 0) {\n        if (isHiding) {\n            // hiding hostEl\n            return [].concat(otherAnimations, hiddenAnimations);\n        }\n        else {\n            // showing hostEl\n            return [].concat(hiddenAnimations, otherAnimations);\n        }\n    }\n    else {\n        return otherAnimations;\n    }\n}\n/* c8 ignore next */\nexport function getHidingAndNonHidingPropertyAnimations(animations) {\n    const hiddenAnimations = [];\n    const otherAnimations = [];\n    Object.getOwnPropertyNames(animations || {}).forEach((prop) => {\n        const animationTuple = [prop, clone(animations[prop])];\n        if (prop === CLARITY_MOTION_ENTER_LEAVE_PROPERTY) {\n            hiddenAnimations.push(animationTuple);\n        }\n        else {\n            otherAnimations.push(animationTuple);\n        }\n    });\n    return [hiddenAnimations, otherAnimations];\n}\n/* c8 ignore next */\nexport function getPropertyAnimations(animations, updatingProps) {\n    const activeAnimations = filterAnimationsByUpdatedProperties(animations || {}, updatingProps);\n    if (activeAnimations === null) {\n        return [];\n    }\n    const hidingAndOtherAnimationsAsTuple = getHidingAndNonHidingPropertyAnimations(activeAnimations);\n    const isHiding = updatingProps.get(CLARITY_MOTION_ENTER_LEAVE_PROPERTY);\n    return flattenAndSortAnimations(hidingAndOtherAnimationsAsTuple, isHiding);\n}\n"],"names":["async","runPropertyAnimations","props","hostEl","_animations","LogService","warn","tagName","toLocaleLowerCase","propertyAnimations","getPropertyAnimations","Promise","all","map","propNameAnimationTuple","propname","propertyAnimationsByValue","get","animatedPropertyValueAsString","toString","cdsMotionValue","cdsMotion","motionName","returnedMotion","getAnimationConfigForPropertyValue","getInlineOverride","motionForMyValue","clone","length","setAnimationConfigOptions","animations","getAnimationPromiseInstructions","then","resolveAnimationEndStatus","result","indexOf","catch","setAnimationStartStatus","getAttribute","AnimationStatus","active","setAttribute","cdsMotionChange","emit","start","ready","end","animationsAreTurnedOff","animationIsReversed","reverseAnimationConfig","zeroOutAnimationConfig","setAnimationEasing","setAnimationDuration","motionConfigs","filter","config","onlyIf","allPropertiesPass","resolve","animationPlayer","getAnimationTarget","target","animate","getAnimationKeyframesOrPropertyIndexedFrames","animation","options","listener","removeEventListener","addEventListener","targetSelector","queryChildFromLightOrShadowDom","animationConfig","Array","isArray","sizeDimensionKeyframes","nameOfAnimation","isSuffixedBy","CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX","anim","direction","CLARITY_MOTION_REVERSE_ANIMATION_LABEL","reverseAnimation","animationName","propName","propValue","inlineOverride","JSON","parse","e","extractAnimationNameIfReversed","name","slice","getAnimationFromOverrideOrDecorator","decoratorValue","overrideValue","ClarityMotion","has","nameOfAnimationFromObject","cdsMotionOverride","setAnimationProperty","CLARITY_MOTION_FALLBACK_DURATION_IN_MS","val","getMillisecondsFromSeconds","getNumericValueFromCssSecondsStyleValue","CLARITY_MOTION_FALLBACK_EASING","duration","easing","propertyName","staticFallback","valueConverter","isCssPropertyName","myConfigOption","valFromProperty","getCssPropertyValue","newConfigOptions","animationKeyframes","kf","Object","prototype","hasOwnProperty","call","isPrefixedBy","height","selector","removePrefix","measureTarget","getBoundingClientRect","width","filterAnimationsByUpdatedProperties","updatingProps","objectIsEmpty","returnObject","getOwnPropertyNames","forEach","prop","undefined","flattenAndSortAnimations","hiddenAndNotAnimationTuple","isHiding","hiddenAnimations","otherAnimations","concat","getHidingAndNonHidingPropertyAnimations","animationTuple","CLARITY_MOTION_ENTER_LEAVE_PROPERTY","push","activeAnimations"],"mappings":"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"}